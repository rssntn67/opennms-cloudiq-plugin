################################################################################
## This file has been generated by refresh_model from:                        ##
## - Base    : 5982cbbb8fa5d7e33d1030b90bd5b7bb                               ##
## - Metadata: 1587d4df1ace6858c7da1cae906af543                               ##
## - Template: 24cd8c70cd5973b7f1d7ef0afb2f8e9c                               ##
## data_api_access_scripts version: 1.16.8                                    ##
## metadata generated at: 2024-02-16 10:54:59.782092                          ##
## DO NOT EDIT THIS FILE, run refresh_model instead.                          ##
################################################################################
openapi: 3.0.0
info:
  title: CloudIQ REST API
  version: '1.0'
  description: CloudIQ Public REST API
  contact:
    name: CloudIQ Support
    email: CloudIQSupport@dell.com
servers:
- url: https://cloudiq.apis.dell.com
tags:
- name: Basic System Info
- name: Generic Hardware
- name: Generic Storage
- name: Generic System
- name: Internal
- name: Metrics
paths:
  /basic-system-information:
    get:
      summary: Get Basic System Information
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResponse'
      operationId: get-basic-system-infos
      description: Get basic system information. Since this is a single resource type,
        the id will be "0".
      tags:
      - Basic System Info
  /rest/v1/compute_hosts/{id}:
    get:
      summary: Get a AcpHost
      description: Get a acp host by its ID.
      operationId: get-rest-v1-compute_host
      parameters:
      - schema:
          type: string
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
          minLength: 0
          maxLength: 1024
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The acp host ID to retrieve
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcpHost'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic Hardware
  /rest/v1/compute_hosts:
    get:
      summary: Get AcpHosts
      description: Get a list of all the acp host objects.
      operationId: get-rest-v1-compute_hosts
      parameters:
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: (simple)  ?filter=age ge 13 (complex)  ?filter=(age lt 18) or (name
            like "foo") or (tags(BusinessUnit.SLA) like 'Gold'))
        in: query
        name: filter
        description: This filters rows in a query, by constraining the result to rows
          matching the property condition(s) specified. Multiple filters are valid
          and are "and"ed together. If the filter query contains a tag key that has
          special characters (such as a dot, dash, or underscore), then the user needs
          to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?order=last_name,age.dsc,system_tags(BusinessUnit.SLA)
        in: query
        name: order
        description: Sorts the result set by the properties specified. Ascending order
          is default if not specified. If the order query contains a tag key that
          has special characters (such as a dot, dash, or underscore), then the user
          needs to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
          default: 500
          example: 500
        in: query
        name: limit
        description: Optional page size desired for the response. If not specified,
          the default page limit is 500.
      - schema:
          type: integer
          format: int32
          minimum: 0
          maximum: 1000
        in: query
        name: offset
        description: Optional starting row of the result set, used with the limit
          for paging. The value is zero based, where offset=0 (the default) starts
          the response from the first row of results.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: AcpHostsCollectionResponse
                description: 'A collection is a list of instances along with metadata
                  about that query. A successful collection query returns a ''200''
                  with a list of instances in the response body. \nAn empty collection
                  response (whether due to no instances at all, or due to filtering
                  out all the existing instances) is not an error. It still returns
                  a ''200'', but the "results": [] list is empty.'
                properties:
                  paging:
                    $ref: '#/components/schemas/Paging'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/AcpHost'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic Hardware
  /rest/v1/hci_systems/{id}:
    get:
      summary: Get a AcpSystem
      description: Get a hci system by its ID.
      operationId: get-rest-v1-hci_system
      parameters:
      - schema:
          type: string
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
          minLength: 0
          maxLength: 1024
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The hci system ID to retrieve
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcpSystem'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic System
  /rest/v1/hci_systems:
    get:
      summary: Get AcpSystems
      description: Get a list of all the hci system objects.
      operationId: get-rest-v1-hci_systems
      parameters:
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: (simple)  ?filter=age ge 13 (complex)  ?filter=(age lt 18) or (name
            like "foo") or (tags(BusinessUnit.SLA) like 'Gold'))
        in: query
        name: filter
        description: This filters rows in a query, by constraining the result to rows
          matching the property condition(s) specified. Multiple filters are valid
          and are "and"ed together. If the filter query contains a tag key that has
          special characters (such as a dot, dash, or underscore), then the user needs
          to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?order=last_name,age.dsc,system_tags(BusinessUnit.SLA)
        in: query
        name: order
        description: Sorts the result set by the properties specified. Ascending order
          is default if not specified. If the order query contains a tag key that
          has special characters (such as a dot, dash, or underscore), then the user
          needs to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
          default: 500
          example: 500
        in: query
        name: limit
        description: Optional page size desired for the response. If not specified,
          the default page limit is 500.
      - schema:
          type: integer
          format: int32
          minimum: 0
          maximum: 1000
        in: query
        name: offset
        description: Optional starting row of the result set, used with the limit
          for paging. The value is zero based, where offset=0 (the default) starts
          the response from the first row of results.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: AcpSystemsCollectionResponse
                description: 'A collection is a list of instances along with metadata
                  about that query. A successful collection query returns a ''200''
                  with a list of instances in the response body. \nAn empty collection
                  response (whether due to no instances at all, or due to filtering
                  out all the existing instances) is not an error. It still returns
                  a ''200'', but the "results": [] list is empty.'
                properties:
                  paging:
                    $ref: '#/components/schemas/Paging'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/AcpSystem'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic System
  /rest/v1/datastores/{id}:
    get:
      summary: Get a DataStore
      description: Get a datastore by its ID.
      operationId: get-rest-v1-datastore
      parameters:
      - schema:
          type: string
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
          minLength: 0
          maxLength: 1024
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The datastore ID to retrieve
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataStore'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic Storage
  /rest/v1/datastores:
    get:
      summary: Get DataStores
      description: Get a list of all the datastore objects.
      operationId: get-rest-v1-datastores
      parameters:
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: (simple)  ?filter=age ge 13 (complex)  ?filter=(age lt 18) or (name
            like "foo") or (tags(BusinessUnit.SLA) like 'Gold'))
        in: query
        name: filter
        description: This filters rows in a query, by constraining the result to rows
          matching the property condition(s) specified. Multiple filters are valid
          and are "and"ed together. If the filter query contains a tag key that has
          special characters (such as a dot, dash, or underscore), then the user needs
          to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?order=last_name,age.dsc,system_tags(BusinessUnit.SLA)
        in: query
        name: order
        description: Sorts the result set by the properties specified. Ascending order
          is default if not specified. If the order query contains a tag key that
          has special characters (such as a dot, dash, or underscore), then the user
          needs to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
          default: 500
          example: 500
        in: query
        name: limit
        description: Optional page size desired for the response. If not specified,
          the default page limit is 500.
      - schema:
          type: integer
          format: int32
          minimum: 0
          maximum: 1000
        in: query
        name: offset
        description: Optional starting row of the result set, used with the limit
          for paging. The value is zero based, where offset=0 (the default) starts
          the response from the first row of results.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: DataStoresCollectionResponse
                description: 'A collection is a list of instances along with metadata
                  about that query. A successful collection query returns a ''200''
                  with a list of instances in the response body. \nAn empty collection
                  response (whether due to no instances at all, or due to filtering
                  out all the existing instances) is not an error. It still returns
                  a ''200'', but the "results": [] list is empty.'
                properties:
                  paging:
                    $ref: '#/components/schemas/Paging'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/DataStore'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic Storage
  /rest/v1/drives/{id}:
    get:
      summary: Get a Drive
      description: Get a drive by its ID.
      operationId: get-rest-v1-drive
      parameters:
      - schema:
          type: string
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
          minLength: 0
          maxLength: 1024
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The drive ID to retrieve
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Drive'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic Storage
  /rest/v1/drives:
    get:
      summary: Get Drives
      description: Get a list of all the drive objects.
      operationId: get-rest-v1-drives
      parameters:
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: (simple)  ?filter=age ge 13 (complex)  ?filter=(age lt 18) or (name
            like "foo") or (tags(BusinessUnit.SLA) like 'Gold'))
        in: query
        name: filter
        description: This filters rows in a query, by constraining the result to rows
          matching the property condition(s) specified. Multiple filters are valid
          and are "and"ed together. If the filter query contains a tag key that has
          special characters (such as a dot, dash, or underscore), then the user needs
          to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?order=last_name,age.dsc,system_tags(BusinessUnit.SLA)
        in: query
        name: order
        description: Sorts the result set by the properties specified. Ascending order
          is default if not specified. If the order query contains a tag key that
          has special characters (such as a dot, dash, or underscore), then the user
          needs to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
          default: 500
          example: 500
        in: query
        name: limit
        description: Optional page size desired for the response. If not specified,
          the default page limit is 500.
      - schema:
          type: integer
          format: int32
          minimum: 0
          maximum: 1000
        in: query
        name: offset
        description: Optional starting row of the result set, used with the limit
          for paging. The value is zero based, where offset=0 (the default) starts
          the response from the first row of results.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: DrivesCollectionResponse
                description: 'A collection is a list of instances along with metadata
                  about that query. A successful collection query returns a ''200''
                  with a list of instances in the response body. \nAn empty collection
                  response (whether due to no instances at all, or due to filtering
                  out all the existing instances) is not an error. It still returns
                  a ''200'', but the "results": [] list is empty.'
                properties:
                  paging:
                    $ref: '#/components/schemas/Paging'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Drive'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic Storage
  /rest/v1/filesystems/{id}:
    get:
      summary: Get a Filesystem
      description: Get a filesystem by its ID.
      operationId: get-rest-v1-filesystem
      parameters:
      - schema:
          type: string
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
          minLength: 0
          maxLength: 1024
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The filesystem ID to retrieve
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filesystem'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic Storage
  /rest/v1/filesystems:
    get:
      summary: Get Filesystems
      description: Get a list of all the filesystem objects.
      operationId: get-rest-v1-filesystems
      parameters:
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: (simple)  ?filter=age ge 13 (complex)  ?filter=(age lt 18) or (name
            like "foo") or (tags(BusinessUnit.SLA) like 'Gold'))
        in: query
        name: filter
        description: This filters rows in a query, by constraining the result to rows
          matching the property condition(s) specified. Multiple filters are valid
          and are "and"ed together. If the filter query contains a tag key that has
          special characters (such as a dot, dash, or underscore), then the user needs
          to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?order=last_name,age.dsc,system_tags(BusinessUnit.SLA)
        in: query
        name: order
        description: Sorts the result set by the properties specified. Ascending order
          is default if not specified. If the order query contains a tag key that
          has special characters (such as a dot, dash, or underscore), then the user
          needs to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
          default: 500
          example: 500
        in: query
        name: limit
        description: Optional page size desired for the response. If not specified,
          the default page limit is 500.
      - schema:
          type: integer
          format: int32
          minimum: 0
          maximum: 1000
        in: query
        name: offset
        description: Optional starting row of the result set, used with the limit
          for paging. The value is zero based, where offset=0 (the default) starts
          the response from the first row of results.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: FilesystemsCollectionResponse
                description: 'A collection is a list of instances along with metadata
                  about that query. A successful collection query returns a ''200''
                  with a list of instances in the response body. \nAn empty collection
                  response (whether due to no instances at all, or due to filtering
                  out all the existing instances) is not an error. It still returns
                  a ''200'', but the "results": [] list is empty.'
                properties:
                  paging:
                    $ref: '#/components/schemas/Paging'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Filesystem'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic Storage
  /rest/v1/firmwares/{id}:
    get:
      summary: Get a Firmware
      description: Get a server firmware by its ID.
      operationId: get-rest-v1-firmware
      parameters:
      - schema:
          type: string
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
          minLength: 0
          maxLength: 1024
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The server firmware ID to retrieve
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Firmware'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic System
  /rest/v1/firmwares:
    get:
      summary: Get Firmwares
      description: Get a list of all the server firmware objects.
      operationId: get-rest-v1-firmwares
      parameters:
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: (simple)  ?filter=age ge 13 (complex)  ?filter=(age lt 18) or (name
            like "foo") or (tags(BusinessUnit.SLA) like 'Gold'))
        in: query
        name: filter
        description: This filters rows in a query, by constraining the result to rows
          matching the property condition(s) specified. Multiple filters are valid
          and are "and"ed together. If the filter query contains a tag key that has
          special characters (such as a dot, dash, or underscore), then the user needs
          to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?order=last_name,age.dsc,system_tags(BusinessUnit.SLA)
        in: query
        name: order
        description: Sorts the result set by the properties specified. Ascending order
          is default if not specified. If the order query contains a tag key that
          has special characters (such as a dot, dash, or underscore), then the user
          needs to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
          default: 500
          example: 500
        in: query
        name: limit
        description: Optional page size desired for the response. If not specified,
          the default page limit is 500.
      - schema:
          type: integer
          format: int32
          minimum: 0
          maximum: 1000
        in: query
        name: offset
        description: Optional starting row of the result set, used with the limit
          for paging. The value is zero based, where offset=0 (the default) starts
          the response from the first row of results.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: FirmwaresCollectionResponse
                description: 'A collection is a list of instances along with metadata
                  about that query. A successful collection query returns a ''200''
                  with a list of instances in the response body. \nAn empty collection
                  response (whether due to no instances at all, or due to filtering
                  out all the existing instances) is not an error. It still returns
                  a ''200'', but the "results": [] list is empty.'
                properties:
                  paging:
                    $ref: '#/components/schemas/Paging'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Firmware'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic System
  /rest/v1/hosts/{id}:
    get:
      summary: Get a Host
      description: Get a host by its ID.
      operationId: get-rest-v1-host
      parameters:
      - schema:
          type: string
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
          minLength: 0
          maxLength: 1024
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The host ID to retrieve
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic Storage
  /rest/v1/hosts:
    get:
      summary: Get Hosts
      description: Get a list of all the host objects.
      operationId: get-rest-v1-hosts
      parameters:
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: (simple)  ?filter=age ge 13 (complex)  ?filter=(age lt 18) or (name
            like "foo") or (tags(BusinessUnit.SLA) like 'Gold'))
        in: query
        name: filter
        description: This filters rows in a query, by constraining the result to rows
          matching the property condition(s) specified. Multiple filters are valid
          and are "and"ed together. If the filter query contains a tag key that has
          special characters (such as a dot, dash, or underscore), then the user needs
          to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?order=last_name,age.dsc,system_tags(BusinessUnit.SLA)
        in: query
        name: order
        description: Sorts the result set by the properties specified. Ascending order
          is default if not specified. If the order query contains a tag key that
          has special characters (such as a dot, dash, or underscore), then the user
          needs to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
          default: 500
          example: 500
        in: query
        name: limit
        description: Optional page size desired for the response. If not specified,
          the default page limit is 500.
      - schema:
          type: integer
          format: int32
          minimum: 0
          maximum: 1000
        in: query
        name: offset
        description: Optional starting row of the result set, used with the limit
          for paging. The value is zero based, where offset=0 (the default) starts
          the response from the first row of results.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: HostsCollectionResponse
                description: 'A collection is a list of instances along with metadata
                  about that query. A successful collection query returns a ''200''
                  with a list of instances in the response body. \nAn empty collection
                  response (whether due to no instances at all, or due to filtering
                  out all the existing instances) is not an error. It still returns
                  a ''200'', but the "results": [] list is empty.'
                properties:
                  paging:
                    $ref: '#/components/schemas/Paging'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Host'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic Storage
  /rest/v1/network_systems/{id}:
    get:
      summary: Get a NetworkSystem
      description: Get a network system by its ID.
      operationId: get-rest-v1-network_system
      parameters:
      - schema:
          type: string
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
          minLength: 0
          maxLength: 1024
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The network system ID to retrieve
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkSystem'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic System
  /rest/v1/network_systems:
    get:
      summary: Get NetworkSystems
      description: Get a list of all the network system objects.
      operationId: get-rest-v1-network_systems
      parameters:
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: (simple)  ?filter=age ge 13 (complex)  ?filter=(age lt 18) or (name
            like "foo") or (tags(BusinessUnit.SLA) like 'Gold'))
        in: query
        name: filter
        description: This filters rows in a query, by constraining the result to rows
          matching the property condition(s) specified. Multiple filters are valid
          and are "and"ed together. If the filter query contains a tag key that has
          special characters (such as a dot, dash, or underscore), then the user needs
          to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?order=last_name,age.dsc,system_tags(BusinessUnit.SLA)
        in: query
        name: order
        description: Sorts the result set by the properties specified. Ascending order
          is default if not specified. If the order query contains a tag key that
          has special characters (such as a dot, dash, or underscore), then the user
          needs to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
          default: 500
          example: 500
        in: query
        name: limit
        description: Optional page size desired for the response. If not specified,
          the default page limit is 500.
      - schema:
          type: integer
          format: int32
          minimum: 0
          maximum: 1000
        in: query
        name: offset
        description: Optional starting row of the result set, used with the limit
          for paging. The value is zero based, where offset=0 (the default) starts
          the response from the first row of results.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: NetworkSystemsCollectionResponse
                description: 'A collection is a list of instances along with metadata
                  about that query. A successful collection query returns a ''200''
                  with a list of instances in the response body. \nAn empty collection
                  response (whether due to no instances at all, or due to filtering
                  out all the existing instances) is not an error. It still returns
                  a ''200'', but the "results": [] list is empty.'
                properties:
                  paging:
                    $ref: '#/components/schemas/Paging'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/NetworkSystem'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic System
  /rest/v1/pools/{id}:
    get:
      summary: Get a Pool
      description: Get a pool by its ID.
      operationId: get-rest-v1-pool
      parameters:
      - schema:
          type: string
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
          minLength: 0
          maxLength: 1024
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The pool ID to retrieve
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pool'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic Storage
  /rest/v1/pools:
    get:
      summary: Get Pools
      description: Get a list of all the pool objects.
      operationId: get-rest-v1-pools
      parameters:
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: (simple)  ?filter=age ge 13 (complex)  ?filter=(age lt 18) or (name
            like "foo") or (tags(BusinessUnit.SLA) like 'Gold'))
        in: query
        name: filter
        description: This filters rows in a query, by constraining the result to rows
          matching the property condition(s) specified. Multiple filters are valid
          and are "and"ed together. If the filter query contains a tag key that has
          special characters (such as a dot, dash, or underscore), then the user needs
          to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?order=last_name,age.dsc,system_tags(BusinessUnit.SLA)
        in: query
        name: order
        description: Sorts the result set by the properties specified. Ascending order
          is default if not specified. If the order query contains a tag key that
          has special characters (such as a dot, dash, or underscore), then the user
          needs to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
          default: 500
          example: 500
        in: query
        name: limit
        description: Optional page size desired for the response. If not specified,
          the default page limit is 500.
      - schema:
          type: integer
          format: int32
          minimum: 0
          maximum: 1000
        in: query
        name: offset
        description: Optional starting row of the result set, used with the limit
          for paging. The value is zero based, where offset=0 (the default) starts
          the response from the first row of results.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: PoolsCollectionResponse
                description: 'A collection is a list of instances along with metadata
                  about that query. A successful collection query returns a ''200''
                  with a list of instances in the response body. \nAn empty collection
                  response (whether due to no instances at all, or due to filtering
                  out all the existing instances) is not an error. It still returns
                  a ''200'', but the "results": [] list is empty.'
                properties:
                  paging:
                    $ref: '#/components/schemas/Paging'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pool'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic Storage
  /rest/v1/ports/{id}:
    get:
      summary: Get a Port
      description: Get a port by its ID.
      operationId: get-rest-v1-port
      parameters:
      - schema:
          type: string
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
          minLength: 0
          maxLength: 1024
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The port ID to retrieve
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Port'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic Hardware
  /rest/v1/ports:
    get:
      summary: Get Ports
      description: Get a list of all the port objects.
      operationId: get-rest-v1-ports
      parameters:
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: (simple)  ?filter=age ge 13 (complex)  ?filter=(age lt 18) or (name
            like "foo") or (tags(BusinessUnit.SLA) like 'Gold'))
        in: query
        name: filter
        description: This filters rows in a query, by constraining the result to rows
          matching the property condition(s) specified. Multiple filters are valid
          and are "and"ed together. If the filter query contains a tag key that has
          special characters (such as a dot, dash, or underscore), then the user needs
          to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?order=last_name,age.dsc,system_tags(BusinessUnit.SLA)
        in: query
        name: order
        description: Sorts the result set by the properties specified. Ascending order
          is default if not specified. If the order query contains a tag key that
          has special characters (such as a dot, dash, or underscore), then the user
          needs to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
          default: 500
          example: 500
        in: query
        name: limit
        description: Optional page size desired for the response. If not specified,
          the default page limit is 500.
      - schema:
          type: integer
          format: int32
          minimum: 0
          maximum: 1000
        in: query
        name: offset
        description: Optional starting row of the result set, used with the limit
          for paging. The value is zero based, where offset=0 (the default) starts
          the response from the first row of results.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: PortsCollectionResponse
                description: 'A collection is a list of instances along with metadata
                  about that query. A successful collection query returns a ''200''
                  with a list of instances in the response body. \nAn empty collection
                  response (whether due to no instances at all, or due to filtering
                  out all the existing instances) is not an error. It still returns
                  a ''200'', but the "results": [] list is empty.'
                properties:
                  paging:
                    $ref: '#/components/schemas/Paging'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Port'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic Hardware
  /rest/v1/server_systems/{id}:
    get:
      summary: Get a ServerSystem
      description: Get a server by its ID.
      operationId: get-rest-v1-server_system
      parameters:
      - schema:
          type: string
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
          minLength: 0
          maxLength: 1024
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The server ID to retrieve
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerSystem'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic System
  /rest/v1/server_systems:
    get:
      summary: Get ServerSystems
      description: Get a list of all the server objects.
      operationId: get-rest-v1-server_systems
      parameters:
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: (simple)  ?filter=age ge 13 (complex)  ?filter=(age lt 18) or (name
            like "foo") or (tags(BusinessUnit.SLA) like 'Gold'))
        in: query
        name: filter
        description: This filters rows in a query, by constraining the result to rows
          matching the property condition(s) specified. Multiple filters are valid
          and are "and"ed together. If the filter query contains a tag key that has
          special characters (such as a dot, dash, or underscore), then the user needs
          to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?order=last_name,age.dsc,system_tags(BusinessUnit.SLA)
        in: query
        name: order
        description: Sorts the result set by the properties specified. Ascending order
          is default if not specified. If the order query contains a tag key that
          has special characters (such as a dot, dash, or underscore), then the user
          needs to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
          default: 500
          example: 500
        in: query
        name: limit
        description: Optional page size desired for the response. If not specified,
          the default page limit is 500.
      - schema:
          type: integer
          format: int32
          minimum: 0
          maximum: 1000
        in: query
        name: offset
        description: Optional starting row of the result set, used with the limit
          for paging. The value is zero based, where offset=0 (the default) starts
          the response from the first row of results.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: ServerSystemsCollectionResponse
                description: 'A collection is a list of instances along with metadata
                  about that query. A successful collection query returns a ''200''
                  with a list of instances in the response body. \nAn empty collection
                  response (whether due to no instances at all, or due to filtering
                  out all the existing instances) is not an error. It still returns
                  a ''200'', but the "results": [] list is empty.'
                properties:
                  paging:
                    $ref: '#/components/schemas/Paging'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServerSystem'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic System
  /rest/v1/storage_resource_pools/{id}:
    get:
      summary: Get a Srp
      description: Get a srp by its ID.
      operationId: get-rest-v1-storage_resource_pool
      parameters:
      - schema:
          type: string
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
          minLength: 0
          maxLength: 1024
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The srp ID to retrieve
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Srp'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic Storage
  /rest/v1/storage_resource_pools:
    get:
      summary: Get Srps
      description: Get a list of all the srp objects.
      operationId: get-rest-v1-storage_resource_pools
      parameters:
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: (simple)  ?filter=age ge 13 (complex)  ?filter=(age lt 18) or (name
            like "foo") or (tags(BusinessUnit.SLA) like 'Gold'))
        in: query
        name: filter
        description: This filters rows in a query, by constraining the result to rows
          matching the property condition(s) specified. Multiple filters are valid
          and are "and"ed together. If the filter query contains a tag key that has
          special characters (such as a dot, dash, or underscore), then the user needs
          to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?order=last_name,age.dsc,system_tags(BusinessUnit.SLA)
        in: query
        name: order
        description: Sorts the result set by the properties specified. Ascending order
          is default if not specified. If the order query contains a tag key that
          has special characters (such as a dot, dash, or underscore), then the user
          needs to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
          default: 500
          example: 500
        in: query
        name: limit
        description: Optional page size desired for the response. If not specified,
          the default page limit is 500.
      - schema:
          type: integer
          format: int32
          minimum: 0
          maximum: 1000
        in: query
        name: offset
        description: Optional starting row of the result set, used with the limit
          for paging. The value is zero based, where offset=0 (the default) starts
          the response from the first row of results.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: SrpsCollectionResponse
                description: 'A collection is a list of instances along with metadata
                  about that query. A successful collection query returns a ''200''
                  with a list of instances in the response body. \nAn empty collection
                  response (whether due to no instances at all, or due to filtering
                  out all the existing instances) is not an error. It still returns
                  a ''200'', but the "results": [] list is empty.'
                properties:
                  paging:
                    $ref: '#/components/schemas/Paging'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Srp'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic Storage
  /rest/v1/storage_groups/{id}:
    get:
      summary: Get a StorageGroup
      description: Get a storage group by its ID.
      operationId: get-rest-v1-storage_group
      parameters:
      - schema:
          type: string
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
          minLength: 0
          maxLength: 1024
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The storage group ID to retrieve
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageGroup'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic Storage
  /rest/v1/storage_groups:
    get:
      summary: Get StorageGroups
      description: Get a list of all the storage group objects.
      operationId: get-rest-v1-storage_groups
      parameters:
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: (simple)  ?filter=age ge 13 (complex)  ?filter=(age lt 18) or (name
            like "foo") or (tags(BusinessUnit.SLA) like 'Gold'))
        in: query
        name: filter
        description: This filters rows in a query, by constraining the result to rows
          matching the property condition(s) specified. Multiple filters are valid
          and are "and"ed together. If the filter query contains a tag key that has
          special characters (such as a dot, dash, or underscore), then the user needs
          to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?order=last_name,age.dsc,system_tags(BusinessUnit.SLA)
        in: query
        name: order
        description: Sorts the result set by the properties specified. Ascending order
          is default if not specified. If the order query contains a tag key that
          has special characters (such as a dot, dash, or underscore), then the user
          needs to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
          default: 500
          example: 500
        in: query
        name: limit
        description: Optional page size desired for the response. If not specified,
          the default page limit is 500.
      - schema:
          type: integer
          format: int32
          minimum: 0
          maximum: 1000
        in: query
        name: offset
        description: Optional starting row of the result set, used with the limit
          for paging. The value is zero based, where offset=0 (the default) starts
          the response from the first row of results.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: StorageGroupsCollectionResponse
                description: 'A collection is a list of instances along with metadata
                  about that query. A successful collection query returns a ''200''
                  with a list of instances in the response body. \nAn empty collection
                  response (whether due to no instances at all, or due to filtering
                  out all the existing instances) is not an error. It still returns
                  a ''200'', but the "results": [] list is empty.'
                properties:
                  paging:
                    $ref: '#/components/schemas/Paging'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/StorageGroup'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic Storage
  /rest/v1/storage_systems/{id}:
    get:
      summary: Get a StorageSystem
      description: Get a storage system by its ID.
      operationId: get-rest-v1-storage_system
      parameters:
      - schema:
          type: string
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
          minLength: 0
          maxLength: 1024
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The storage system ID to retrieve
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageSystem'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic System
  /rest/v1/storage_systems:
    get:
      summary: Get StorageSystems
      description: Get a list of all the storage system objects.
      operationId: get-rest-v1-storage_systems
      parameters:
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: (simple)  ?filter=age ge 13 (complex)  ?filter=(age lt 18) or (name
            like "foo") or (tags(BusinessUnit.SLA) like 'Gold'))
        in: query
        name: filter
        description: This filters rows in a query, by constraining the result to rows
          matching the property condition(s) specified. Multiple filters are valid
          and are "and"ed together. If the filter query contains a tag key that has
          special characters (such as a dot, dash, or underscore), then the user needs
          to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?order=last_name,age.dsc,system_tags(BusinessUnit.SLA)
        in: query
        name: order
        description: Sorts the result set by the properties specified. Ascending order
          is default if not specified. If the order query contains a tag key that
          has special characters (such as a dot, dash, or underscore), then the user
          needs to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
          default: 500
          example: 500
        in: query
        name: limit
        description: Optional page size desired for the response. If not specified,
          the default page limit is 500.
      - schema:
          type: integer
          format: int32
          minimum: 0
          maximum: 1000
        in: query
        name: offset
        description: Optional starting row of the result set, used with the limit
          for paging. The value is zero based, where offset=0 (the default) starts
          the response from the first row of results.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: StorageSystemsCollectionResponse
                description: 'A collection is a list of instances along with metadata
                  about that query. A successful collection query returns a ''200''
                  with a list of instances in the response body. \nAn empty collection
                  response (whether due to no instances at all, or due to filtering
                  out all the existing instances) is not an error. It still returns
                  a ''200'', but the "results": [] list is empty.'
                properties:
                  paging:
                    $ref: '#/components/schemas/Paging'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/StorageSystem'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic System
  /rest/v1/systems/{id}:
    get:
      summary: Get a System
      description: Get a system by its ID.
      operationId: get-rest-v1-system
      parameters:
      - schema:
          type: string
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
          minLength: 0
          maxLength: 1024
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The system ID to retrieve
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic System
  /rest/v1/systems:
    get:
      summary: Get Systems
      description: Get a list of all the system objects.
      operationId: get-rest-v1-systems
      parameters:
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: (simple)  ?filter=age ge 13 (complex)  ?filter=(age lt 18) or (name
            like "foo") or (tags(BusinessUnit.SLA) like 'Gold'))
        in: query
        name: filter
        description: This filters rows in a query, by constraining the result to rows
          matching the property condition(s) specified. Multiple filters are valid
          and are "and"ed together. If the filter query contains a tag key that has
          special characters (such as a dot, dash, or underscore), then the user needs
          to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?order=last_name,age.dsc,system_tags(BusinessUnit.SLA)
        in: query
        name: order
        description: Sorts the result set by the properties specified. Ascending order
          is default if not specified. If the order query contains a tag key that
          has special characters (such as a dot, dash, or underscore), then the user
          needs to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
          default: 500
          example: 500
        in: query
        name: limit
        description: Optional page size desired for the response. If not specified,
          the default page limit is 500.
      - schema:
          type: integer
          format: int32
          minimum: 0
          maximum: 1000
        in: query
        name: offset
        description: Optional starting row of the result set, used with the limit
          for paging. The value is zero based, where offset=0 (the default) starts
          the response from the first row of results.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: SystemsCollectionResponse
                description: 'A collection is a list of instances along with metadata
                  about that query. A successful collection query returns a ''200''
                  with a list of instances in the response body. \nAn empty collection
                  response (whether due to no instances at all, or due to filtering
                  out all the existing instances) is not an error. It still returns
                  a ''200'', but the "results": [] list is empty.'
                properties:
                  paging:
                    $ref: '#/components/schemas/Paging'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/System'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic System
  /rest/v1/virtual_machines/{id}:
    get:
      summary: Get a VirtualMachine
      description: Get a virtual machine by its ID.
      operationId: get-rest-v1-virtual_machine
      parameters:
      - schema:
          type: string
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
          minLength: 0
          maxLength: 1024
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The virtual machine ID to retrieve
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualMachine'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic Storage
  /rest/v1/virtual_machines:
    get:
      summary: Get VirtualMachines
      description: Get a list of all the virtual machine objects.
      operationId: get-rest-v1-virtual_machines
      parameters:
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: (simple)  ?filter=age ge 13 (complex)  ?filter=(age lt 18) or (name
            like "foo") or (tags(BusinessUnit.SLA) like 'Gold'))
        in: query
        name: filter
        description: This filters rows in a query, by constraining the result to rows
          matching the property condition(s) specified. Multiple filters are valid
          and are "and"ed together. If the filter query contains a tag key that has
          special characters (such as a dot, dash, or underscore), then the user needs
          to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?order=last_name,age.dsc,system_tags(BusinessUnit.SLA)
        in: query
        name: order
        description: Sorts the result set by the properties specified. Ascending order
          is default if not specified. If the order query contains a tag key that
          has special characters (such as a dot, dash, or underscore), then the user
          needs to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
          default: 500
          example: 500
        in: query
        name: limit
        description: Optional page size desired for the response. If not specified,
          the default page limit is 500.
      - schema:
          type: integer
          format: int32
          minimum: 0
          maximum: 1000
        in: query
        name: offset
        description: Optional starting row of the result set, used with the limit
          for paging. The value is zero based, where offset=0 (the default) starts
          the response from the first row of results.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: VirtualMachinesCollectionResponse
                description: 'A collection is a list of instances along with metadata
                  about that query. A successful collection query returns a ''200''
                  with a list of instances in the response body. \nAn empty collection
                  response (whether due to no instances at all, or due to filtering
                  out all the existing instances) is not an error. It still returns
                  a ''200'', but the "results": [] list is empty.'
                properties:
                  paging:
                    $ref: '#/components/schemas/Paging'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/VirtualMachine'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic Storage
  /rest/v1/volumes/{id}:
    get:
      summary: Get a Volume
      description: Get a volume by its ID.
      operationId: get-rest-v1-volume
      parameters:
      - schema:
          type: string
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
          minLength: 0
          maxLength: 1024
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The volume ID to retrieve
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic Storage
  /rest/v1/volumes:
    get:
      summary: Get Volumes
      description: Get a list of all the volume objects.
      operationId: get-rest-v1-volumes
      parameters:
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: (simple)  ?filter=age ge 13 (complex)  ?filter=(age lt 18) or (name
            like "foo") or (tags(BusinessUnit.SLA) like 'Gold'))
        in: query
        name: filter
        description: This filters rows in a query, by constraining the result to rows
          matching the property condition(s) specified. Multiple filters are valid
          and are "and"ed together. If the filter query contains a tag key that has
          special characters (such as a dot, dash, or underscore), then the user needs
          to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?select=id,name,system_tags(BusinessUnit.SLA)
        in: query
        name: select
        description: By default, all properties are returned in resource instances.
          This can be very expensive - large and slow for large collection responses
          in particular. This allows the client to select the specific properties
          that they need, which in addition to the performance benefits for the client
          and server, also documents the dependencies of the client code, and makes
          it more resilient to changes on the server side. If the select query contains
          a tag key that has special characters (such as a dot, dash, or underscore),
          then the user needs to enclose such keys within parentheses (). Examples
          are tags(dot.key.0), tags(dash-key-0), or tags(underscore_0). If the key
          does not contain any special characters, then examples of what the user
          can use are tags.BusinessUnit or tags(BusinessUnit).
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: ?order=last_name,age.dsc,system_tags(BusinessUnit.SLA)
        in: query
        name: order
        description: Sorts the result set by the properties specified. Ascending order
          is default if not specified. If the order query contains a tag key that
          has special characters (such as a dot, dash, or underscore), then the user
          needs to enclose such keys within parentheses (). Examples are tags(dot.key.0),
          tags(dash-key-0), or tags(underscore_0). If the key does not contain any
          special characters, then examples of what the user can use are tags.BusinessUnit
          or tags(BusinessUnit).
      - schema:
          type: integer
          format: int32
          minimum: 1
          maximum: 1000
          default: 500
          example: 500
        in: query
        name: limit
        description: Optional page size desired for the response. If not specified,
          the default page limit is 500.
      - schema:
          type: integer
          format: int32
          minimum: 0
          maximum: 1000
        in: query
        name: offset
        description: Optional starting row of the result set, used with the limit
          for paging. The value is zero based, where offset=0 (the default) starts
          the response from the first row of results.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: VolumesCollectionResponse
                description: 'A collection is a list of instances along with metadata
                  about that query. A successful collection query returns a ''200''
                  with a list of instances in the response body. \nAn empty collection
                  response (whether due to no instances at all, or due to filtering
                  out all the existing instances) is not an error. It still returns
                  a ''200'', but the "results": [] list is empty.'
                properties:
                  paging:
                    $ref: '#/components/schemas/Paging'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Volume'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Generic Storage
  /rest/v1/metrics/query:
    post:
      summary: Get Metrics
      description: Perform a metrics query to the system. Responses are always in
        timestamp granularity - either all requested data for a timestamp is returned,
        or none.
      operationId: post-rest-v1-metrics-query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetricsQuery'
      responses:
        '200':
          $ref: '#/components/responses/MetricsQueryResponse'
        '206':
          $ref: '#/components/responses/PartialMetricsQueryResponse'
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Operation Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Metrics
  /rest/v1/metric-metadata:
    get:
      summary: Get Metric Metadata
      description: Get a list of all the metric metadata.
      operationId: get-metric-metadata--collection
      responses:
        '200':
          $ref: '#/components/responses/MetricMetadataCollection'
        '206':
          $ref: '#/components/responses/PagedMetricMetadataCollection'
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
      - Metrics
      parameters:
      - schema:
          type: string
          minLength: 0
          maxLength: 1024
          example: (simple)  ?filter=name eq "bandwidth" (complex)  ?filter=name eq
            "bandwidth" or (type like "RATE")
        in: query
        name: filter
        description: This filters rows in a query, by constraining the result to rows
          matching the property condition specified.
  /rest/v1/metric-metadata/{id}:
    get:
      summary: Get a Metric Metadata
      description: Get a metric metadata by its ID.
      tags:
      - Metrics
      operationId: get-metric-metadata--instance
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricMetadataInstance'
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Unique identifier of the metric metadata instance.
components:
  schemas:
    MetricsQuery:
      type: object
      description: 'Metrics query operation request body, specifying the desired metrics.

        '
      x-examples:
        'Metrics Query Example ':
          resource_type: volume
          ids:
          - APM000__VOLUME__vol1001
          metrics:
          - free_space
          interval: PT5S
          from: '2019-08-24T14:15:22Z'
          to: '2019-08-24T15:15:22Z'
      properties:
        resource_type:
          $ref: '#/components/schemas/MetricMetadataResourceTypeEnum'
        ids:
          description: "List of resource ids for which to get metrics. All ids must\
            \ be of the \nresource_type specified above.\n"
          type: array
          minItems: 1
          maxItems: 999
          items:
            type: string
            maxLength: 256
        metrics:
          description: "List of desired metric names. \nMust be valid for resource_type,\
            \ according to metric catalog.\n"
          type: array
          minItems: 1
          maxItems: 99
          items:
            type: string
            pattern: ^[a-zA-Z0-9_]
            maxLength: 127
        interval:
          $ref: '#/components/schemas/MetricsIntervalEnum'
        from:
          description: "The beginning timestamp for the query. Metrics _greater than_\
            \ this time will \nbe returned.  Default is the earliest timestamp available\
            \ for the \nrequested metrics. \nPassing the highest timestamp from the\
            \ prior metrics report will\nensure that no duplicates or excluded metrics\
            \ occur.\n"
          type: string
          format: date-time
        to:
          description: "The ending timestamp for the query. Metrics _less than or\
            \ equal to_ this \ntime will be returned.  Default is the latest timestamp\
            \ available for the \nrequested metrics.\n"
          type: string
          format: date-time
      required:
      - resource_type
      - ids
      - metrics
      x-tags:
      - Metrics
    MetricsResponseEntries:
      description: Metrics Query Responses
      type: object
      x-examples:
        Metrics Response Entries Example:
          metrics:
          - iops
          - latency
          - bandwidth
          results:
          - id: APM000__VOLUME__vol1001
            timestamps:
            - timestamp: '2022-06-01T11:00:00Z'
              values:
              - 1.0166666666666666
              - 1.01
              - 2.0266666666666664
            - timestamp: '2022-06-01T11:05:00Z'
              values:
              - 1.0177777777777
              - 1.01
              - 2.027777777777
            - timestamp: '2022-06-01T11:10:00Z'
              values:
              - 1.013
              - 1.01
              - 2.023
          - id: APM000__VOLUME__vol1002
            timestamps:
            - timestamp: '2022-06-01T11:00:00Z'
              values:
              - 1.0166666666666666
              - 1.01
              - 2.0266666666666664
            - timestamp: '2022-06-01T11:05:00Z'
              values:
              - 1.01
              - 1.0266666666
              - 2.0366666666
            - timestamp: '2022-06-01T11:10:00Z'
              values:
              - 1.01
              - 1.027777
              - 2.037777
      properties:
        metrics:
          type: array
          items:
            type: string
        results:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/MetricsResponseEntry'
      title: Metrics Response Entries
      x-tags:
      - Metrics
    PartialMetricsResponseEntries:
      description: Partial Metrics Query Responses
      type: object
      x-examples:
        Metrics Response Entries Example:
          from: '2022-06-01T11:00:00Z'
          to: '2022-06-01T11:10:00Z'
          metrics:
          - iops
          - latency
          - bandwidth
          results:
          - id: APM000__VOLUME__vol1001
            timestamps:
            - timestamp: '2022-06-01T11:00:00Z'
              values:
              - 1.0166666666666666
              - 1.01
              - 2.0266666666666664
            - timestamp: '2022-06-01T11:05:00Z'
              values:
              - 1.0177777777777
              - 1.01
              - 2.027777777777
            - timestamp: '2022-06-01T11:10:00Z'
              values:
              - 1.013
              - 1.01
              - 2.023
          - id: APM000__VOLUME__vol1002
            timestamps:
            - timestamp: '2022-06-01T11:00:00Z'
              values:
              - 1.0166666666666666
              - 1.01
              - 2.0266666666666664
            - timestamp: '2022-06-01T11:05:00Z'
              values:
              - 1.01
              - 1.0266666666
              - 2.0366666666
            - timestamp: '2022-06-01T11:10:00Z'
              values:
              - 1.01
              - 1.027777
              - 2.037777
      properties:
        from:
          description: The beginning timestamp for this response.
          type: string
        to:
          description: The ending timestamp for this response. Use this value as 'from'
            in the next query to get later metrics.
          type: string
        metrics:
          type: array
          items:
            type: string
        results:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/MetricsResponseEntry'
      title: Metrics Response Entries
      x-tags:
      - Metrics
    MetricsResponseEntry:
      description: Metrics Response Entry
      type: object
      x-examples:
        Metrics Response Entry Example:
          id: APM000__VOLUME__vol1001
          timestamps:
          - timestamp: '2022-06-01T11:00:00Z'
            values:
            - 1.0166666666666666
            - 1.01
            - 2.0266666666666664
      properties:
        id:
          type: string
          minLength: 1
        timestamps:
          type: array
          items:
            $ref: '#/components/schemas/MetricsValueEntry'
      x-tags:
      - Metrics
    MetricsValueEntry:
      description: Metrics Value Entry
      type: object
      x-examples:
        Metrics Value Entry Example:
          timestamp: '2022-06-01T11:00:00Z'
          values:
          - 1.0166666666666666
          - 1.01
          - 2.0266666666666664
      title: Metrics Value Entry
      properties:
        timestamp:
          type: string
        values:
          type: array
          items:
            type: number
            format: double
      x-tags:
      - Metrics
    MetricMetadataCategoryEnum:
      description: 'These are the available metric categories. Not all resource types
        have

        metrics in every category.

        * PERF - Performance metrics such as latency and throughput measures.

        * SPACE - Capacity metrics, primarily for storage. All values in bytes.

        type: string

        '
      enum:
      - PERF
      - SPACE
      x-tags:
      - Metrics
    MetricMetadataTypeEnum:
      description: 'These are the various kinds of metrics.

        * FACT - A value that can vary up and down such as a temperature. Integer
        or number type.

        * RATE - A calculated rate, normally as (counter change)/(time interval in
        seconds). Integer or number type.

        * COUNTER - An increasing value, not reset between reads, such as a read IO
        counter. Always integer type.

        '
      type: string
      enum:
      - FACT
      - RATE
      - COUNTER
      default: COUNTER
      x-tags:
      - Metrics
    MetricMetadataResourceTypeEnum:
      type: string
      description: 'These are the resource types that support metrics.

        * datastore - Data store

        * drive - Spinning or flash drives.

        * filesystem - File system.

        * hci_system - HCI System

        * host - Host

        * network_system - Network System

        * pool - Pool

        * server_system - Server System

        * storage_system - Storage System

        * volume - Block volume (aka LUN).

        '
      enum:
      - datastore
      - drive
      - filesystem
      - hci_system
      - host
      - network_system
      - pool
      - server_system
      - storage_group
      - storage_system
      - volume
      minLength: 1
      nullable: false
      x-tags:
      - Metrics
    MetricMetadataUnitsEnum:
      type: string
      description: "These are the various supported units for metrics.\nNote that\
        \ RATE type metrics add an implied \"per second\" to the units expressed \n\
        using this, and that rates can be type:number(format:float) in addition to\
        \ listed value types.\n* COUNT - A value that increases over time (may wrap\
        \ to zero). Always integer.\n* PERCENT - A percentage value in the 0-100 range.\
        \ May be integer or number(float).\n* RPM - Revolutions per minute. May be\
        \ integer or number(float).\n* SECOND - Time duration in seconds. May be integer\
        \ or number(float).\n* MILLISECOND - Time duration in milliseconds. May be\
        \ integer or number(float).\n* MICROSECOND - Time duration in microseconds.\
        \ May be integer or number(float).\n* BYTE - A byte of data. Always integer.\
        \ Always int64 format when referring to storage.\n* IO - An I/O operation.\
        \ Always integer.\n* PACKET - A network packet. Always integer.\n* VOLT -\
        \ Voltage. Always number (float).\n* AMP - Amperage. Always number (float).\n\
        * DEGREE_C - Celsius temperature. May be integer or number(float). Number\
        \ is recommended.\n* WATTS - Watt. Always integer.\n* GRAM - GRAM. Always\
        \ number (float).\n* KILOWATT_P_HOUR - Kilowatt per hour. Always integer.\n\
        * WATT_P_HOUR - Watt per hour. Always integer.\n* CUBICFEET_P_MINUTE - Cubic\
        \ feet per minute. May be integer or number(float). Number is recommended.\n"
      enum:
      - COUNT
      - PERCENT
      - RPM
      - SECOND
      - MILLISECOND
      - MICROSECOND
      - BYTE
      - IO
      - PACKET
      - VOLT
      - AMP
      - DEGREE_C
      - WATTS
      - GRAM
      - KILOWATT_P_HOUR
      - WATT_P_HOUR
      - CUBICFEET_P_MINUTE
      x-tags:
      - Metrics
    MetricsIntervalEnum:
      type: string
      description: 'These are the available intervals for collection and rollup metrics.

        All collection and rollups should occur at the top of the minute/hour/day.

        These enum values are chosen from the ISO 8601 interval pattern: -?P(\d+D)?(T(\d+H)?(\d+M)?(\d+(.\d+)?S)?)

        The collection interval may vary by resource type, and only that and

        higher intervals are available.

        * PT5M - five minutes

        * PT15M - fifteen minutes

        * PT1H - one hour

        * P1D - one day

        '
      enum:
      - PT5M
      - PT15M
      - PT1H
      - P1D
      title: Metrics Interval Enum
      minLength: 1
      x-tags:
      - Metrics
    MetricMetadataInstances:
      description: Metric Metadata Instances
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/MetricMetadataInstance'
      x-tags:
      - Metrics
    MetricMetadataInstance:
      type: object
      description: Properties of a metric-metadata instance as available from a specific
        resource type.
      properties:
        id:
          type: string
          x-ref: metric-metadata
          description: Unique identifier of a metric metadata resource.
        name:
          type: string
          description: Name of the metric.
          pattern: ^[a-zA-Z0-9_]+$
          maxLength: 64
        description:
          type: string
          description: Description of metric content, meaning, and usage.
        category:
          $ref: '#/components/schemas/MetricMetadataCategoryEnum'
        type:
          $ref: '#/components/schemas/MetricMetadataTypeEnum'
        units:
          $ref: '#/components/schemas/MetricMetadataUnitsEnum'
        resource_type:
          $ref: '#/components/schemas/MetricMetadataResourceTypeEnum'
        interval:
          $ref: '#/components/schemas/MetricsIntervalEnum'
        rollups:
          type: array
          description: List of queryable summary/rollup data intervals, in addition
            to the base "interval" which is the raw collection interval for the metric.
          items:
            $ref: '#/components/schemas/MetricsIntervalEnum'
      title: Metric Metadata Instance
      x-tags:
      - Metrics
    BasicSystemInformation:
      title: BasicSystemInformation
      type: object
      description: Basic information about the system.
      properties:
        id:
          type: string
          description: Unique identifier of the basic-system-info. This is a singleton,
            so the id is always "0"
        name:
          type: string
          description: System name.
        model:
          type: string
          description: System model.
        service_tag:
          type: string
          description: System service tag.
        release_version:
          type: string
          description: Software release version.
        supported_api_versions:
          type: array
          description: List of supported API versions, in major.minor format (no leading
            "v" and no patch number).
          items:
            type: string
      x-tags:
      - Basic System Info
    CollectionResponse:
      title: CollectionResponse
      type: object
      description: 'A collection is a list of instances along with metadata about
        that query. A successful collection query returns a ''200'' with a list of
        instances in the response body. \nAn empty collection response (whether due
        to no instances at all, or due to filtering out all the existing instances)
        is not an error. It still returns a ''200'', but the "results": [] list is
        empty.'
      properties:
        paging:
          $ref: '#/components/schemas/Paging'
        results:
          type: array
          items:
            type: object
      x-tags:
      - Internal
    Paging:
      title: Paging
      type: object
      description: Contains paging reponse data
      x-examples:
        paging:
          total_instances: 555
          first: /rest/users
          last: /rest/users?offset='200'&limit=2
          next: /rest/users?offset=4&limit=2
          prev: /rest/users?offset=0&limit=2
      properties:
        total_instances:
          type: integer
          description: This the the collection size, not the reponse size.
          format: int64
        first:
          type: string
        last:
          type: string
        next:
          type: string
        prev:
          type: string
      x-tags:
      - Internal
    HTTPStatusEnum:
      type: integer
      description: 'Possible HTTP status values of completed or failed jobs.

        * 200 - OK - Successful completion, with a response body.

        * 201 - Created - Successful completion of a create request (POST to collection
        resource).

        * 202 - Accepted - Job has been started. Response body is a job resource instance.
        Response status and body are available from job when it completes.

        * 204 - No Content - Successful completion, without a response body.

        * 206 - Partial Content - Paged response to a collection query.

        * 400 - Invalid Request - The request is incorrect. To the extent possible,
        validate requests up front and use this code. Details in the response body.

        * 401 - Unauthorized - The request cannot be authenticated.

        * 403 - Forbidden - The request is not allowed for this client.

        * 404 - Not Found - The id value in the request URL is not valid.

        * 413 - Payload Too Large - Response exceeds the limit.

        * 422 - Operation Failed - The request failed during execution.

        * 429 - Too Many Requests - This particular client needs to slow down and
        take it easy. Retry after a delay.

        * 500 - Internal Error - This means the product has a bug and customer should
        contact support.

        * 503 - Service Unavailable - The service is temporarily unavailable. Try
        again later.'
      enum:
      - 200
      - 201
      - 202
      - 204
      - 206
      - 400
      - 401
      - 403
      - 404
      - 413
      - 422
      - 429
      - 500
      - 503
      x-tags:
      - Internal
    SeverityEnum:
      type: string
      description: "The severity of the condition.\n* INFO - Information that may\
        \ be of use in understanding the \n  failure. It is not a problem to fix.\n\
        * WARNING - A condition that isn't a failure, but may be \n  unexpected or\
        \ a contributing factor. It may be necessary to \n  fix the condition to successfully\
        \ retry the request.\n* ERROR - An actual failure condition through which\
        \ the \n  request could not continue.\n* CRITICAL - A failure with significant\
        \ impact to the system. \n  Normally failed commands roll back and are just\
        \ ERROR, \n  but may be used for exceptional cases."
      enum:
      - INFO
      - WARNING
      - ERROR
      - CRITICAL
      x-tags:
      - Internal
    ErrorResponse:
      title: ErrorReponse
      type: object
      description: A standard response body used for all non-2xx REST responses.
      properties:
        http_status_code:
          $ref: '#/components/schemas/HTTPStatusEnum'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ErrorMessages'
      x-tags:
      - Internal
    ErrorMessages:
      title: ErrorMessage
      type: object
      description: A message describing the failure, a contributing factor to the
        \nfailure, or possibly the aftermath of the failure.
      properties:
        code:
          type: string
          description: Identifier for this kind of message. This is a string that
            can be used to look up additional information on the support website.
            \n(Note - specific format can be determined by platform - hex value codes
            are common in Midrange.)
        timestamp:
          type: string
          format: date-time
          description: The time at which the error occurred.
        severity:
          $ref: '#/components/schemas/SeverityEnum'
        message:
          type: string
          description: Message string.
        message_l10n:
          type: string
          description: Localized message string.
        arguments:
          type: array
          description: Ordered list of substitution args for the error message. Must
            match up with the {0}, {1}, etc... actually in the message referenced
            by the message code above, if any.
          items:
            type: object
      x-tags:
      - Internal
    AcpHost:
      title: ACP Host
      description: APEX Cloud Platform Host.
      type: object
      required:
      - id
      properties:
        id:
          title: ID
          description: Unique identifier of the ACP host.
          type: string
        system_id:
          title: System
          description: Unique identifier for the system.
          type: string
        system:
          title: System
          description: DEPRECATED - Unique identifier for the system.
          type: string
          deprecated: true
        system_type:
          title: System Type
          description: Type of the system.
          type: string
        appliance_serial_number:
          title: Appliance Serial Number
          description: The appliance serial number of the host, this only applies
            to VxRail hosts now.
          type: string
        chassis_serial_number:
          title: Chassis Serial Number
          description: Serial number of the Chassis containing the host.
          type: string
        remote_server_management_ip:
          title: iDRAC IP
          description: iDRAC IP of the system.
          type: string
        model:
          title: Model
          description: Model name of the ACP host.
          type: string
        object_name:
          title: Name
          description: Name of the ACP host.
          type: string
        object_type:
          title: Object Type
          description: 'Type of the object, the value should be one of: HOST (for
            VxRail product)/HOST_SYSTEM (for VMWare product type).'
          type: string
        role:
          title: Role
          description: Role name of the host.
          type: string
        serial_number:
          title: Serial Number
          description: Serial Number of the ACP host.
          type: string
        service_tag:
          title: Service Tag
          description: Service tag of the system.
          type: string
        system_unified_type:
          title: System Type
          description: 'Type of the system, the value should be one of: VXRAIL/VMWARE.'
          type: string
      x-tags:
      - Generic Hardware
    AcpSystem:
      title: HCI System
      description: HCI Systems.
      type: object
      required:
      - id
      properties:
        id:
          title: ID
          description: Unique identifier for the system.
          type: string
        system_id:
          title: System
          description: Unique identifier for the system.
          type: string
        system:
          title: System
          description: DEPRECATED - Unique identifier for the system.
          type: string
          deprecated: true
        system_type:
          title: System Type
          description: Type of system.
          type: string
        acp_product_type:
          title: ACP Product Type
          description: Type of the ACP Product.
          type: string
        capacity_impact:
          title: Capacity Impact
          description: Impact point of highest impacting issue in the capacity health
            category.
          type: integer
          format: int64
        capacity_issue_count:
          title: Capacity Issue Count
          description: Total number of issues in the capacity health category.
          type: integer
          format: int64
        city:
          title: City
          description: Name of the city where the system is located.
          type: string
        cluster_mgmt_fqdn:
          title: vCenter FQDN
          description: The FQDN of vCenter where the cluster is located.
          type: string
        cluster_model:
          title: Cluster model
          description: Cluster model of the Product.
          type: string
        configuration_impact:
          title: Configuration Impact
          description: Impact point of highest impacting issue in the configuration
            health category.
          type: integer
          format: int64
        configuration_issue_count:
          title: Configuration Issue Count
          description: Total number of issues in the configuration health category.
          type: integer
          format: int64
        connectivity_status:
          title: Cluster Connectivity Status
          description: The cluster connectivity status.
          type: string
        contract_coverage_type:
          title: Contract Coverage Type
          description: Type of the service contract of the system.
          type: string
        contract_expiration_timestamp:
          title: Contract Expiration Date
          description: Expiration date for the service contract of the system.
          type: string
          format: date-time
        contract_expiration_date_timestamp:
          title: Contract Expiration Date
          description: DEPRECATED - Expiration date for the service contract of the
            system.
          type: string
          format: date-time
          deprecated: true
        contract_number:
          title: Contract Number
          description: The contract number.
          type: string
        country:
          title: Country
          description: Name of the country where the system is located.
          type: string
        cpu_available:
          title: CPU Available
          description: Total free CPU.
          type: integer
          format: int64
        data_protection_impact:
          title: Data Protection Impact
          description: Impact point of highest impacting issue in the data protection
            health category.
          type: integer
          format: int64
        data_protection_issue_count:
          title: Data Protection Issue Count
          description: Total number of issues in the data protection health category.
          type: integer
          format: int64
        display_identifier:
          title: Display Identifier
          description: Unique identifier for the system.
          type: string
        hardware_version:
          title: Hardware Version
          description: APEX Cloud Platform Hardware Updates Version.
          type: string
        health_connectivity_status:
          title: Cluster Health Connectivity Status
          description: The cluster health connectivity status.
          type: string
        health_issue_count:
          title: Health Issue Count
          description: Total amount of health issues.
          type: integer
          format: int64
        health_score:
          title: Health Score
          description: Health score of the system.
          type: integer
          format: int64
        health_state:
          title: Health State
          description: Health state of the system.
          type: string
        install_timestamp:
          title: VxRail Version Install Time
          description: The install time of the current VxRail version.
          type: string
          format: date-time
        ipv4_address:
          title: IPv4 Address
          description: IPv4 address of the system.
          type: string
          format: ipv4
        ipv6_address:
          title: IPv6 Address
          description: IPv6 address of the system.
          type: string
          format: ipv6
        is_witness_host_shared:
          title: Is Witness Host Shared?
          description: Witness Host appliance is shared or not.
          type: boolean
        is_witness_host_virtual:
          title: Is Witness Host Virtual?
          description: Witness Host appliance is physical or virtual.
          type: boolean
        last_contact_timestamp:
          title: Last Contact Time
          description: Last time that CloudIQ received data from the system.
          type: string
          format: date-time
        location:
          title: Cluster Location
          description: Location where the system can be found.
          type: string
        memory_available:
          title: Memory Available
          description: Total free memory.
          type: integer
          format: int64
        model:
          title: Model
          description: Model of the system.
          type: string
        object_name:
          title: Name
          description: Name of the system.
          type: string
        number_of_compute_nodes:
          title: Number of compute nodes
          description: Total number of compute nodes.
          type: integer
          format: int64
        number_of_nodes:
          title: Number of nodes
          description: Total number of nodes.
          type: integer
          format: int64
        number_of_storage_nodes:
          title: Number of storage nodes
          description: Total number of storage nodes.
          type: integer
          format: int64
        partner_os:
          title: Partner OS
          description: Operating System of the ACP Product.
          type: string
        performance_impact:
          title: Performance Impact
          description: Impact point of highest impacting issue in the performance
            health category.
          type: integer
          format: int64
        performance_issue_count:
          title: Performance Issue Count
          description: Total number of issues in the performance health category.
          type: integer
          format: int64
        predicted_time_to_full_timestamp:
          title: Predicted Full Date
          description: The predicted full date of cluster capacity forecast.
          type: string
          format: date-time
        predicted_full_date_timestamp:
          title: Predicted Full Date
          description: DEPRECATED - The predicted full date of cluster capacity forecast.
          type: string
          format: date-time
          deprecated: true
        product:
          title: Product
          description: Cluster Product name.
          type: string
        serial_number:
          title: Serial Number
          description: Serial number of the system.
          type: string
        service_tag:
          title: Service Tag
          description: Service Tag for ACP System.
          type: string
        site_name:
          title: Site
          description: Name of the site where the system is located. For multi sites
            case, the value will be one site name of managing hosts.
          type: string
        state:
          title: State
          description: Name of the state where the system is located.
          type: string
        storage_free_size:
          title: Free Size
          description: 'The storage free size of cluster - Unit: bytes'
          type: integer
          format: int64
        storage_system_type:
          title: Storage System Type
          description: The name of the storage system type.
          type: string
        storage_total_size:
          title: Total Size
          description: 'The storage total size of cluster - Unit: bytes'
          type: integer
          format: int64
        storage_used_size:
          title: Used Size
          description: 'The storage used size of cluster - Unit: bytes'
          type: integer
          format: int64
        storage_version:
          title: Storage version
          description: Storage version.
          type: string
        street_address_1:
          title: Street Address 1
          description: Street address 1 of where the system is located.
          type: string
        street_address_2:
          title: Street Address 2
          description: Street address 2 of where the system is located.
          type: string
        system_health_impact:
          title: System Health Impact
          description: Health impact for the system.
          type: integer
          format: int64
        system_health_issue_count:
          title: System Health Issue Count
          description: Total amount of health issues for the system.
          type: integer
          format: int64
        system_tags:
          title: Tags
          description: User defined tags.
          type: object
        total_appliances:
          title: Appliance Count
          description: Cluster total appliances number.
          type: integer
          format: int64
        total_hosts:
          title: Host Count
          description: Cluster total hosts number.
          type: integer
          format: int64
        type:
          title: System Type
          description: Type of system.
          type: string
        vc_license_type:
          title: vCenter License Type
          description: License Type of vCenter.
          type: string
        vc_server:
          title: vCenter Host
          description: vCenter Host.
          type: string
        vc_version:
          title: vCenter Version
          description: Version of vCenter where the cluster is located.
          type: string
        vendor:
          title: Vendor
          description: Name of the vendor who makes the system.
          type: string
        version:
          title: Version
          description: Version number of the system.
          type: string
        witness_host_moid:
          title: Witness Host MOID
          description: Witness Host Managed Object ID.
          type: string
        witness_host_name:
          title: Witness Hostname
          description: Hostname of Witness Host.
          type: string
        witness_host_uuid:
          title: Witness Host UUID
          description: UUID of the Witness Host.
          type: string
        witness_host_version:
          title: Witness Host Version
          description: Witness Host VMware ESXi version.
          type: string
        zip_code:
          title: ZIP Code
          description: State ZIP code of where the system is located.
          type: string
      x-tags:
      - Generic System
    DataStore:
      title: Datastore
      description: The datastore object.
      type: object
      required:
      - id
      properties:
        id:
          title: ID
          description: Unique identifier of the datastore object.
          type: string
        system_id:
          title: System
          description: Unique identifier of the system managing this datastore.
          type: string
        system:
          title: System
          description: DEPRECATED - Unique identifier of the system managing this
            datastore.
          type: string
          deprecated: true
        system_type:
          title: System Type
          description: 'System type for the datastore, the value should be one of:
            VXRAIL/VMWARE.'
          type: string
        export_path:
          title: Export Path
          description: Path used to connect to the datastore.
          type: string
        free_size:
          title: Free Size
          description: 'Free size of the datastore - Unit: bytes'
          type: integer
          format: int64
        object_name:
          title: Name
          description: Name of the datastore.
          type: string
        object_type:
          title: Object Type
          description: Type of the object, which is always DATASTORE.
          type: string
        system_unified_type:
          title: System Type
          description: 'System type for the datastore, the value should be one of:
            VXRAIL/VMWARE.'
          type: string
        total_size:
          title: Total Size
          description: 'Total size of the datastore - Unit: bytes'
          type: integer
          format: int64
        type:
          title: Type
          description: Type of datastore in vSphere.
          type: string
        used_percent:
          title: Used (%)
          description: Percentage of datastore capacity that is being used.
          type: number
          format: double
        used_size:
          title: Used Size
          description: 'Used size of the datastore - Unit: bytes'
          type: integer
          format: int64
      x-tags:
      - Generic Storage
    Drive:
      title: Drive
      description: The drive object.
      type: object
      required:
      - id
      properties:
        id:
          title: ID
          description: Identifier of the drive.
          type: string
        system_id:
          title: System
          description: Unique identifier for the device or appliance.
          type: string
        system:
          title: System
          description: DEPRECATED - Unique identifier for the device or appliance.
          type: string
          deprecated: true
        system_type:
          title: System Type
          description: System type for the drive.
          type: string
        bay:
          title: Bay
          description: Bay number where the drive is located.
          type: integer
          format: int64
        data_store_id:
          title: DataStore ID
          description: Object identifier of datastore which is using this drive.
          type: string
        data_store_name:
          title: DataStore Name
          description: Name of datastore which is using this drive.
          type: string
        disk_technology:
          title: Disk Technology
          description: Type of disk technology, such as HDD or SDD.
          type: string
        disk_technology_multilingual:
          title: Disk Technology
          description: Type of disk technology, such as HDD or SDD.
          type: string
        drive_metadata:
          title: Drive Metadata
          description: Drive metadata of the drive.
          type: string
        enclosure:
          title: Enclosure
          description: Enclosure number of the drive used in host.
          type: integer
          format: int64
        endurance_days:
          title: Endurance Days
          description: Estimated number of days left before drive will reach specified
            write endurance and must be replaced.
          type: integer
          format: int64
        endurance_percent:
          title: Endurance (%)
          description: Percentage of write endurance left, based on specified maximum
            write endurance of drive.
          type: integer
          format: int64
        endurance_state:
          title: Endurance State
          description: Endurance state of the drive.
          type: string
        free_size:
          title: Free Size
          description: 'Free Size of the drive - Unit: bytes'
          type: integer
          format: int64
        host_id:
          title: Host ID
          description: Host object identifier of drive located.
          type: string
        host_name:
          title: Host Name
          description: Host name of drive located.
          type: string
        issue_count:
          title: Issue Count
          description: Number of health issues that are present on the drive.
          type: integer
          format: int64
        model:
          title: Model
          description: Model name of the drive.
          type: string
        object_name:
          title: Name
          description: Name of the drive.
          type: string
        object_native_id:
          title: Native ID
          description: Identifier of the object, defined by the system.
          type: string
        object_type:
          title: Object Type
          description: Type of the drive.
          type: string
        part_number:
          title: Part Number
          description: Part number of the drive.
          type: string
        pool_id:
          title: Pool ID
          description: Pool identifier.
          type: string
        pool_name:
          title: Pool Name
          description: Name of the pool.
          type: string
        protocol:
          title: Protocol
          description: Protocol type used by the drive.
          type: string
        raid_group_type:
          title: RAID Group Type
          description: RAID group type.
          type: string
        rpm:
          title: RPM
          description: The drive speed (RPM).
          type: integer
          format: int64
        serial_number:
          title: Serial Number
          description: Serial number of the drive.
          type: string
        size:
          title: Size
          description: 'Size of the drive - Unit: bytes'
          type: integer
          format: int64
        slot:
          title: Slot
          description: Slot number of the drive located in host.
          type: integer
          format: int64
        state:
          title: State
          description: State of the drive.
          type: string
        system_aas_model:
          title: System Model
          description: System model of the drive.
          type: string
        system_model:
          title: System Model
          description: System model of the drive.
          type: string
        system_name:
          title: System Name
          description: System name of the drive.
          type: string
        system_unified_type:
          title: System Type
          description: System type for the drive.
          type: string
        tier_type:
          title: Tier Type
          description: Tier type of the drive, such as Flash, Performance, or Capacity.
          type: string
        used_size:
          title: Used Size
          description: 'Used Size of the drive - Unit: bytes'
          type: integer
          format: int64
        vendor:
          title: Vendor
          description: Vendor of the drive.
          type: string
        version:
          title: Version
          description: Version of the drive.
          type: string
      x-tags:
      - Generic Storage
    Filesystem:
      title: Filesystem
      description: The file system object.
      type: object
      required:
      - id
      properties:
        id:
          title: Id
          description: Identifier of the file system.
          type: string
        system_id:
          title: System
          description: Unique identifier for the device or appliance.
          type: string
        system:
          title: System
          description: DEPRECATED - Unique identifier for the device or appliance.
          type: string
          deprecated: true
        system_type:
          title: System Type
          description: The system type for the file system.
          type: string
        allocated_size:
          title: Allocated Size
          description: 'The allocated size of the file system - Unit: bytes'
          type: integer
          format: int64
        bandwidth:
          title: Bandwidth
          description: 'Average read and write bytes per second over the last 24 hours
            - Unit: bytes/s'
          type: integer
          format: int64
        data_reduction_percent:
          title: Data Reduction (%)
          description: The data reduction percent for the file system.
          type: number
          format: double
        data_reduction_ratio:
          title: Data Reduction Ratio
          description: The data reduction ratio for the file system.
          type: number
          format: double
        data_reduction_saved_size:
          title: Data Reduction Saved Size
          description: 'The data reduction saved size for the file system - Unit:
            bytes'
          type: integer
          format: int64
        iops:
          title: IOPS
          description: 'Average read and write I/Os per seconds over the last 24 hours
            - Unit: IO/s'
          type: integer
          format: int64
        is_thin_enabled:
          title: Is Thin Enabled
          description: Identifies whether the file system has thin provisioning enabled.
          type: boolean
        issue_count:
          title: Issue Count
          description: Number of health issues that are present on the file system.
          type: integer
          format: int64
        tags:
          title: Tags
          description: User defined tags.
          type: object
        latency:
          title: Latency
          description: 'Average read and write latency in microseconds per I/O over
            the last 24 hours - Unit: microseconds'
          type: integer
          format: int64
        object_name:
          title: Name
          description: Name of the file system.
          type: string
        nas_server_id:
          title: NAS ServerId
          description: The NAS server ID.
          type: string
        nas_server_name:
          title: NAS Server Name
          description: The NAS server name for the file system.
          type: string
        object_native_id:
          title: Native Id
          description: Identifier of the object, defined by the system.
          type: string
        object_type:
          title: Object Type
          description: Type of the object.
          type: string
        performance_policy_name:
          title: Performance Policy Name
          description: The performance policy name for the file system.
          type: string
        pool_id:
          title: Pool Id
          description: The pool identifier for the file system.
          type: string
        pool_name:
          title: Pool Name
          description: Name of the pool.
          type: string
        pool_type:
          title: Pool Type
          description: Type of the pool.
          type: string
        protection_policy_name:
          title: Protection Policy Name
          description: The protection policy name for the file system.
          type: string
        storage_resource_id:
          title: Storage Resource Id
          description: The storage resource identifier for the file system.
          type: string
        storage_resource_native_id:
          title: Storage Resource Native Id
          description: The storage resource native identifier for the file system.
          type: string
        supported_protocols:
          title: Supported Protocols
          description: The supported protocols for the file system.
          type: string
        system_aas_model:
          title: System Model
          description: The model of the system for the file system.
          type: string
        system_tags:
          title: System Tags
          description: User defined tags.
          type: object
        system_model:
          title: System Model
          description: The model of the system for the file system.
          type: string
        system_name:
          title: System Name
          description: The name of the system.
          type: string
        system_unified_type:
          title: System Type
          description: The system type for the file system.
          type: string
        predicted_time_to_full_enum:
          title: Time to Full
          description: The time to full prediction for the file system.
          type: string
        time_to_full_prediction:
          title: Time to Full
          description: DEPRECATED - The time to full prediction for the file system.
          type: string
          deprecated: true
        total_size:
          title: Total Size
          description: 'The total size of the file system - Unit: bytes'
          type: integer
          format: int64
        type:
          title: Type
          description: The type of the file system.
          type: string
        used_percent:
          title: Used (%)
          description: Percentage used for the file system.
          type: number
          format: double
        used_size:
          title: Used Size
          description: 'Size used for the file system - Unit: bytes'
          type: integer
          format: int64
      x-tags:
      - Generic Storage
    Firmware:
      title: Server Firmware
      description: Firmware information of the system. This includes the version of
        firmware on the system.
      type: object
      required:
      - id
      properties:
        id:
          title: Id
          description: Identifier of the data firmware system.
          type: string
        system_id:
          title: System
          description: System for which firmware information is for.
          type: string
        system:
          title: System
          description: DEPRECATED - System for which firmware information is for.
          type: string
          deprecated: true
        system_type:
          title: System Type
          description: Type of system for which firmware information is for.
          type: string
        aisle_location:
          title: Aisle Location
          description: Aisle Location of the system associated with the Firmware.
          type: string
        baseline_version:
          title: BaseLine Version
          description: BaseLine firmware Version or the latest firmware version of
            the component for the system.
          type: string
        datacenter_location:
          title: Datacenter Location
          description: Data center Location of the system associated with the Firmware
          type: string
        details:
          title: Firmware Name
          description: Detailed name of the firmware.
          type: string
        device_description:
          title: Software Description
          description: Description of the firmware associated with Component Id.
          type: string
        installed_timestamp:
          title: Installation Date
          description: Date when the firmware was installed.
          type: string
          format: date-time
        installation_date:
          title: Installation Date
          description: DEPRECATED - Date when the firmware was installed.
          type: string
          format: date-time
          deprecated: true
        ip_address:
          title: IP Address
          description: Firmware system IP Address.
          type: string
        ipv4_address:
          title: IP Address
          description: IPv4 Address of the system associated with the firmware information.
          type: string
        ipv6_address:
          title: IPv6 Address
          description: IPv6 Address of the system associated with the firmware information.
          type: string
        location:
          title: Location
          description: Firmware Location.
          type: string
        rack_location:
          title: Rack Location
          description: Rack Location of the system associated with the Firmware.
          type: string
        room_location:
          title: Room Location
          description: Room Location of the system associated with the Firmware
          type: string
        service_tag:
          title: Service Tag
          description: Service tag of the system.
          type: string
        slot_location:
          title: Slot Location
          description: Slot Location of the system associated with the Firmware.
          type: string
        software_type:
          title: Software Type
          description: Type of the software ex. BIOS, firmware, driver.
          type: string
        system_aas_model:
          title: Device Model
          description: Identifies the specific model of the server.
          type: string
        system_model:
          title: Device Model
          description: Identifies the specific model of the server.
          type: string
        system_name:
          title: System Name
          description: System Name of the system associated with the Firmware.
          type: string
        system_unified_type:
          title: System Type
          description: Type of system for which firmware information is for.
          type: string
        version:
          title: Version
          description: Version of firmware.
          type: string
      x-tags:
      - Generic System
    Host:
      title: Host
      description: The host object.
      type: object
      required:
      - id
      properties:
        id:
          title: Id
          description: Host identifier.
          type: string
        system_id:
          title: System
          description: Unique identifier for the device or appliance.
          type: string
        system:
          title: System
          description: DEPRECATED - Unique identifier for the device or appliance.
          type: string
          deprecated: true
        system_type:
          title: System Type
          description: Product type of the system.
          type: string
        description:
          title: Description
          description: Description of the host.
          type: string
        initiator_count:
          title: Initiator (#)
          description: Number of initiators that are connected between the host or
            server and the monitored system.
          type: integer
          format: int64
        initiator_protocol:
          title: Initiator Protocol
          description: Type of initiator (FC or iSCSI) that the host or server uses
            to connect to a monitored system.
          type: string
        issue_count:
          title: Issue Count
          description: Number of health issues that are present on the host or server.
          type: integer
          format: int64
        tags:
          title: Tags
          description: User defined tags.
          type: object
        object_name:
          title: Name
          description: Name of the host or server.
          type: string
        object_native_id:
          title: Native Id
          description: Identifier of the object, defined by the system.
          type: string
        network_addresses:
          title: IP Address
          description: IPv4 or IPv6 IP addresses, domain names, or netgroup name associated
            with the host or server.
          type: string
        object_type:
          title: Object Type
          description: Type of the object.
          type: string
        operating_system:
          title: Operating System
          description: Operating system of the host or server.
          type: string
        system_aas_model:
          title: System Model
          description: Model of the system.
          type: string
        system_tags:
          title: System Tags
          description: User defined tags.
          type: object
        system_model:
          title: System Model
          description: Model of the system.
          type: string
        system_name:
          title: System Name
          description: Name of the system.
          type: string
        system_unified_type:
          title: System Type
          description: Product type of the system.
          type: string
        total_size:
          title: Total Size
          description: 'Total size of all LUNs or Volumes that are provisioned to
            the host or server from the system - Unit: bytes'
          type: integer
          format: int64
      x-tags:
      - Generic Storage
    NetworkSystem:
      title: Network System
      description: The network system object.
      type: object
      required:
      - id
      properties:
        id:
          title: Id
          description: Identifier of the system.
          type: string
        system_id:
          title: System
          description: Unique identifier for the device or appliance.
          type: string
        system:
          title: System
          description: DEPRECATED - Unique identifier for the device or appliance.
          type: string
          deprecated: true
        system_type:
          title: System Type
          description: Type of the system.
          type: string
        bios_version:
          title: BIOS Version
          description: Version of BIOS.
          type: string
        bit_errors:
          title: Bit Errors
          description: Number of bit errors across all ports on the system.
          type: integer
          format: int64
        capacity_impact:
          title: Capacity Impact
          description: Impact point of highest impacting issue in the capacity health
            category.
          type: integer
          format: int64
        capacity_issue_count:
          title: Capacity Issue Count
          description: Total number of issues in the capacity health category.
          type: integer
          format: int64
        chassis_wwn:
          title: Chassis WWN
          description: Chassis World Wide Name (WWN) of the switch.
          type: string
        ciqc:
          title: CIQC
          description: CloudIQ Collector GDS identifier.
          type: string
        ciqc_name:
          title: CIQC Name
          description: Name of the CloudIQ Collector.
          type: string
        city:
          title: City
          description: Name of the city where the system is located.
          type: string
        configuration_impact:
          title: Configuration Impact
          description: Impact point of highest impacting issue in the configuration
            health category.
          type: integer
          format: int64
        configuration_issue_count:
          title: Configuration Issue Count
          description: Total number of issues in the configuration health category.
          type: integer
          format: int64
        congested_ports:
          title: Congested Ports
          description: Total number of congested ports on the switch.
          type: integer
          format: int64
        connectivity_status:
          title: Connectivity Status
          description: Connectivity status.
          type: string
        contract_coverage_type:
          title: Contract Coverage Type
          description: Type of the service contract of the system.
          type: string
        contract_expiration_timestamp:
          title: Contract Expiration Date
          description: Expiration date for the service contract of the system.
          type: string
          format: date-time
        contract_expiration_date_timestamp:
          title: Contract Expiration Date
          description: DEPRECATED - Expiration date for the service contract of the
            system.
          type: string
          format: date-time
          deprecated: true
        country:
          title: Country
          description: Name of the country where the system is located.
          type: string
        cpu_utilization:
          title: CPU Utilization
          description: Amount of CPU usage.
          type: number
          format: double
        data_protection_impact:
          title: Data Protection Impact
          description: Impact point of highest impacting issue in the data protection
            health category.
          type: integer
          format: int64
        data_protection_issue_count:
          title: Data Protection Issue Count
          description: Total number of issues in the data protection health category.
          type: integer
          format: int64
        display_identifier:
          title: Display Identifier
          description: Unique identifier for the system.
          type: string
        energy_ytd:
          title: Year-to-date Energy
          description: Energy consumed since the beginning of calendar year in kW.
          type: integer
          format: int64
        error_fc_ports:
          title: Error FC Ports
          description: Number of FC ports with errors.
          type: integer
          format: int64
        error_ge_ports:
          title: Error GE Ports
          description: Number of GE ports with errors.
          type: integer
          format: int64
        error_ports:
          title: Error Ports
          description: Total number of ports with errors.
          type: integer
          format: int64
        health_connectivity_status:
          title: Health Connectivity Status
          description: Health connectivity status.
          type: string
        health_issue_count:
          title: Health Issue Count
          description: Total amount of health issues.
          type: integer
          format: int64
        health_score:
          title: Health Score
          description: Health score of the system.
          type: integer
          format: int64
        health_state:
          title: Health State
          description: Health state of the system.
          type: string
        incrementing_bit_errors:
          title: Incrementing Errors
          description: Incrementing errors for the system.
          type: integer
          format: int64
        incrementing_link_resets:
          title: Incrementing Link Resets
          description: Incrementing link resets for the system.
          type: integer
          format: int64
        ipv4_address:
          title: IPv4 Address
          description: IPv4 address of the system.
          type: string
          format: ipv4
        ipv6_address:
          title: IPv6 Address
          description: IPv6 address of the system.
          type: string
          format: ipv6
        last_contact_timestamp:
          title: Last Contact Time
          description: Time of last contact with the system.
          type: string
          format: date-time
        link_resets:
          title: Link Resets
          description: Number of link resets across all ports on the system.
          type: integer
          format: int64
        location:
          title: Location
          description: Location where the system can be found.
          type: string
        model:
          title: Model
          description: Model of the system.
          type: string
        object_name:
          title: Name
          description: Name of the system.
          type: string
        offline_fc_ports:
          title: Offline FC Ports
          description: Total number of FC ports that are offline.
          type: integer
          format: int64
        offline_ge_ports:
          title: Offline GE Ports
          description: Total number of GE ports that are offline.
          type: integer
          format: int64
        offline_ports:
          title: Offline Ports
          description: Total number of ports that are offline.
          type: integer
          format: int64
        online_fc_ports:
          title: Online FC Ports
          description: Total number of FC ports that are online.
          type: integer
          format: int64
        online_ge_ports:
          title: Online GE Ports
          description: Total number of GE ports that are online.
          type: integer
          format: int64
        online_ports:
          title: Online Ports
          description: Total number of ports that are online.
          type: integer
          format: int64
        os_type:
          title: OS Type
          description: Type of OS on the device.
          type: string
        partial_wwn:
          title: Part of wwn based on the model for Connectrix systems
          description: Substring of wwn based on the model for Connectrix systems
          type: string
        performance_impact:
          title: Performance Impact
          description: Impact point of highest impacting issue in the performance
            health category.
          type: integer
          format: int64
        performance_issue_count:
          title: Performance Issue Count
          description: Total number of issues in the performance health category.
          type: integer
          format: int64
        ports_over_80_percent:
          title: Ports Over 80 Percent
          description: Number of ports with over 80 percent utilization.
          type: integer
          format: int64
        power_consumption:
          title: Power Consumption
          description: Average power consumption for the day.
          type: integer
          format: int64
        serial_number:
          title: Serial Number
          description: Serial number of the system.
          type: string
        service_tag:
          title: Service Tag
          description: Service tag of the device.
          type: string
        site_name:
          title: Site
          description: Name of the site where the system is located.
          type: string
        smart_license_status:
          title: Smart License Status
          description: System smart license status.
          type: string
        state:
          title: State
          description: Name of the state where the system is located.
          type: string
        street_address_1:
          title: Street Address 1
          description: Street address 1 of where the system is located.
          type: string
        street_address_2:
          title: Street Address 2
          description: Street address 2 of where the system is located.
          type: string
        switch_mac:
          title: Switch MAC
          description: The switch MAC property.
          type: string
        switch_operating_mode:
          title: Switch Operating Mode
          description: Switch operating mode of the device.
          type: string
        system_health_impact:
          title: System Health Impact
          description: Health impact for the system.
          type: integer
          format: int64
        system_health_issue_count:
          title: System Health Issue Count
          description: Total amount of health issues for the system.
          type: integer
          format: int64
        system_tags:
          title: Tags
          description: User defined tags.
          type: object
        total_fc_ports:
          title: Total FC Ports
          description: Total number of FC ports on the system.
          type: integer
          format: int64
        total_ge_ports:
          title: Total GE Ports
          description: Total number of GE ports on the system.
          type: integer
          format: int64
        total_ports:
          title: Total Ports
          description: Total number of ports on the system.
          type: integer
          format: int64
        type:
          title: Type
          description: Type of the system.
          type: string
        uptime:
          title: Uptime
          description: Time since last reboot of the system.
          type: integer
          format: int64
        utilization:
          title: Utilization
          description: Overall bandwidth utilization of the system.
          type: number
          format: double
        vendor:
          title: Vendor
          description: Name of the vendor who makes the system.
          type: string
        version:
          title: Version
          description: Current firmware version of the system.
          type: string
        wwn:
          title: WWN
          description: World Wide Name (WWN) of the component.
          type: string
        ytd_co2e:
          title: Year-to-date CO2
          description: CO2 emitted since the beginning of calendar year in kg.
          type: integer
          format: int64
        zip_code:
          title: Zip Code
          description: State ZIP code of where the system is located.
          type: string
      x-tags:
      - Generic System
    Pool:
      title: Pool
      description: The pool object.
      type: object
      required:
      - id
      properties:
        id:
          title: Id
          description: Identifier of the pool.
          type: string
        system_id:
          title: System
          description: Unique identifier for the device or appliance.
          type: string
        system:
          title: System
          description: DEPRECATED - Unique identifier for the device or appliance.
          type: string
          deprecated: true
        system_type:
          title: System Type
          description: Type of the system.
          type: string
        free_size:
          title: Free Size
          description: 'Available capacity - Unit: bytes'
          type: integer
          format: int64
        issue_count:
          title: Issue Count
          description: Number of health issues that are present on the pool.
          type: integer
          format: int64
        tags:
          title: Tags
          description: User defined tags.
          type: object
        object_name:
          title: Name
          description: Name of the pool.
          type: string
        object_native_id:
          title: Native Id
          description: Identifier of the object, defined by the system.
          type: string
        object_type:
          title: Object Type
          description: Type of the object, which is always POOL.
          type: string
        subscribed_percent:
          title: Subscribed (%)
          description: Percentage of pool capacity that is provisioned.
          type: number
          format: double
        subscribed_size:
          title: Subscribed Size
          description: 'Total subscribed capacity of the pool - Unit: bytes'
          type: integer
          format: int64
        system_aas_model:
          title: System Model
          description: Model of the system.
          type: string
        system_tags:
          title: System Tags
          description: User defined tags.
          type: object
        system_model:
          title: System Model
          description: Model of the system.
          type: string
        system_name:
          title: System Name
          description: Name of the system.
          type: string
        system_unified_type:
          title: System Type
          description: Type of the system.
          type: string
        predicted_time_to_full_enum:
          title: Time to Full
          description: Predicted time that the pool will become full.
          type: string
        time_to_full_prediction:
          title: Time to Full
          description: DEPRECATED - Predicted time that the pool will become full.
          type: string
          deprecated: true
        total_size:
          title: Total Size
          description: 'Total capacity of the pool - Unit: bytes'
          type: integer
          format: int64
        type:
          title: Type
          description: The type of pool.
          type: string
        used_percent:
          title: Used (%)
          description: Percentage of pool capacity that is being used.
          type: number
          format: double
        used_size:
          title: Used Size
          description: 'Capacity of the pool that is being used - Unit: bytes'
          type: integer
          format: int64
      x-tags:
      - Generic Storage
    Port:
      title: Port
      description: The port object.
      type: object
      required:
      - id
      properties:
        id:
          title: Id
          description: The port ID.
          type: string
        system_id:
          title: System
          description: Unique identifier for the device or appliance.
          type: string
        system:
          title: System
          description: DEPRECATED - Unique identifier for the device or appliance.
          type: string
          deprecated: true
        system_type:
          title: System type
          description: Type of the system.
          type: string
        connector_type:
          title: Connector Type
          description: Type of connector.
          type: string
        health_description:
          title: Health Description
          description: Health description for the port.
          type: string
        health_value:
          title: Health Value
          description: Health value for the port.
          type: string
        link_aggregation:
          title: Link Aggregation
          description: Links multiple Ethernet ports to one logical port.
          type: boolean
        object_name:
          title: Name
          description: Name of the port.
          type: string
        needs_replacement:
          title: Needs Replacement
          description: Port needs to be replaced.
          type: boolean
        object_type:
          title: Object Type
          description: Type of the object.
          type: string
        port_number:
          title: Port Number
          description: Number of the port.
          type: integer
          format: int64
        status:
          title: Status
          description: Status of the port.
          type: string
        system_aas_model:
          title: System Model
          description: Model of the system.
          type: string
        system_model:
          title: System Model
          description: Model of the system.
          type: string
        system_name:
          title: System name
          description: Name of the system.
          type: string
        system_unified_type:
          title: System type
          description: Type of the system.
          type: string
        type:
          title: Type
          description: Type of the system.
          type: string
        wwn_or_mac_address:
          title: WWN Or MAC Address
          description: World Wide Name (WWN) or MAC address of the component.
          type: string
      x-tags:
      - Generic Hardware
    ServerSystem:
      title: Server
      description: The server system object.
      type: object
      required:
      - id
      properties:
        id:
          title: Id
          description: Identifier for the system.
          type: string
        system_id:
          title: System
          description: Unique identifier for the device or appliance.
          type: string
        system:
          title: System
          description: DEPRECATED - Unique identifier for the device or appliance.
          type: string
          deprecated: true
        system_type:
          title: System Type
          description: Type of the system.
          type: string
        aisle_location:
          title: Aisle Location
          description: Location of the aisle where the device or appliance can be
            found.
          type: string
        asset_tag:
          title: Asset Tag
          description: Asset tag of the device or appliance.
          type: string
        bios_version:
          title: BIOS Version
          description: Version of the BIOS.
          type: string
        capacity_impact:
          title: Capacity Impact
          description: Impact point of highest impacting issue in the capacity health
            category.
          type: integer
          format: int64
        capacity_issue_count:
          title: Capacity Issue Count
          description: Total number of issues in the capacity health category.
          type: integer
          format: int64
        chassis_group:
          title: Chassis Group
          description: Name of the Multi Chassis Management group
          type: string
        chassis_name:
          title: Chassis Name
          description: Name of the Chassis.
          type: string
        chassis_service_tag:
          title: Chassis ServiceTag
          description: This is the tag associated with chassis.
          type: string
        city:
          title: City
          description: Name of the city where the system is located.
          type: string
        collected_by:
          title: Collected By
          description: Comma separated ids of OMEs sending data for a system.
          type: string
        compute_manager_id:
          title: Compute manager Id
          description: OME which collects the system data.
          type: string
        configuration_impact:
          title: Configuration Impact
          description: Impact point of highest impacting issue in the configuration
            health category.
          type: integer
          format: int64
        configuration_issue_count:
          title: Configuration Issue Count
          description: Total number of issues in the configuration health category.
          type: integer
          format: int64
        connectivity_status:
          title: Connectivity Status
          description: Connectivity status.
          type: string
        contract_coverage_type:
          title: Contract Coverage Type
          description: Type of the service contract of the system.
          type: string
        contract_expiration_timestamp:
          title: Contract Expiration Date
          description: Expiration date for the service contract of the system.
          type: string
          format: date-time
        contract_expiration_date_timestamp:
          title: Contract Expiration Date
          description: DEPRECATED - Expiration date for the service contract of the
            system.
          type: string
          format: date-time
          deprecated: true
        contract_start_timestamp:
          title: Contract Start Date
          description: Start date for the service contract.
          type: string
          format: date-time
        contract_start_date_timestamp:
          title: Contract Start Date
          description: DEPRECATED - Start date for the service contract.
          type: string
          format: date-time
          deprecated: true
        country:
          title: Country
          description: Name of the country where the system is located.
          type: string
        cpu_usage_percent:
          title: CPU Usage (%)
          description: 'CPU usage - Unit: Percent.'
          type: integer
          format: int64
        cyber_security_enabled:
          title: Cyber Security Enabled
          description: Cyber Security Enabled flag for a server system.
          type: boolean
        data_protection_impact:
          title: Data Protection Impact
          description: Impact point of highest impacting issue in the data protection
            health category.
          type: integer
          format: int64
        data_protection_issue_count:
          title: Data Protection Issue Count
          description: Total number of issues in the data protection health category.
          type: integer
          format: int64
        datacenter_location:
          title: Datacenter Location
          description: Location of the datacenter where the device or appliance can
            be found.
          type: string
        device_type:
          title: Server Type
          description: Type of Server, whether server or chassis.
          type: string
        display_identifier:
          title: Display Identifier
          description: Unique identifier for the system.
          type: string
        empty_slot:
          title: Empty Slot Count
          description: Count of the empty slots.
          type: string
        energy_ytd:
          title: Year-to-date Energy
          description: Energy consumed since the beginning of calendar year in kW.
          type: integer
          format: int64
        express_service_code:
          title: Express Service Code
          description: Numeric version of Service Tag to use for telephone call routing
            when contacting Support.
          type: string
        health_connectivity_status:
          title: Health Connectivity Status
          description: Health connectivity status.
          type: string
        health_issue_count:
          title: Overall Health Issue Count
          description: Total amount of health issues.
          type: integer
          format: int64
        health_score:
          title: Health Score
          description: Health score of the system.
          type: integer
          format: int64
        health_state:
          title: Health State
          description: Health state of the system.
          type: string
        idrac_dns_name:
          title: MC DNS Name
          description: The Management Controller DNS Name. MC for Chassis is Management
            Module (MM), the MC for PowerEdge is iDRAC.
          type: string
        inlet_temperature:
          title: "Inlet Temperature (\xB0C)"
          description: Inlet temperature of a system in degrees Celsius.
          type: integer
          format: int64
        ipv4_address:
          title: IP Address
          description: The IP address of the system.
          type: string
          format: ipv4
        ipv6_address:
          title: IPv6 Address
          description: The IPv6 address of the system.
          type: string
          format: ipv6
        last_contact_timestamp:
          title: Last Contact Time
          description: Time of last contact with the system.
          type: string
          format: date-time
        lead_chassis_service_tag:
          title: Lead Chassis Service Tag
          description: Service Tag of the lead chassis in the Multi Chassis Management
            group
          type: string
        license:
          title: License
          description: The license associated with the system.
          type: string
        location:
          title: Location
          description: Location where the system can be found.
          type: string
        memory_usage_percent:
          title: Memory Usage (%)
          description: 'Memory usage for the system - Unit: Percent.'
          type: integer
          format: int64
        model:
          title: Model
          description: Model of the system.
          type: string
        object_name:
          title: Name
          description: Name of the system.
          type: string
        performance_impact:
          title: Performance Impact
          description: Impact point of highest impacting issue in the performance
            health category.
          type: integer
          format: int64
        performance_issue_count:
          title: Performance Issue Count
          description: Total number of issues in the performance health category.
          type: integer
          format: int64
        power_consumption:
          title: Power Consumption (W)
          description: Power consumed by the system in Watts.
          type: integer
          format: int64
        power_state:
          title: Power State
          description: This identifies if server is Powered On or Powered Off.
          type: string
        rack_location:
          title: Rack Location
          description: Location of the rack where the device or appliance can be found.
          type: string
        remote_management_enabled:
          title: Remote Management Enabled
          description: Remote Management Enabled flag for a server system.
          type: boolean
        role:
          title: Chassis Role
          description: Role of the chassis in the Multi Chassis Management group.
          type: string
        room_location:
          title: Room Location
          description: Location of the room where the device or appliance can be found.
          type: string
        serial_number:
          title: Serial Number
          description: Serial number of the system.
          type: string
        service_tag:
          title: Service Tag
          description: Service tag of the system.
          type: string
        site_name:
          title: Site
          description: Name of the site where the system is located.
          type: string
        slot:
          title: Slot
          description: Slot location.
          type: string
        slot_location:
          title: Slot Location
          description: Location of the slot where the device or appliance can be found.
          type: string
        state:
          title: State
          description: Name of the state where the system is located.
          type: string
        street_address_1:
          title: Street Address 1
          description: Street address 1 of where the system is located.
          type: string
        street_address_2:
          title: Street Address 2
          description: Street address 2 of where the system is located.
          type: string
        system_board_io_usage_percent:
          title: System Board IO Usage (%)
          description: 'I/O usage of the system board - Unit: Percent.'
          type: integer
          format: int64
        system_compliance_severity:
          title: System Compliance Severity
          description: Server System level system compliance severity.
          type: integer
          format: int64
        system_health_impact:
          title: System Health Impact
          description: Health impact for the system.
          type: integer
          format: int64
        system_health_issue_count:
          title: System Health Issue Count
          description: Total amount of health issues for the system.
          type: integer
          format: int64
        system_tags:
          title: Tags
          description: User defined tags.
          type: object
        system_usage_percent:
          title: System Usage (%)
          description: Percentage of system use.
          type: integer
          format: int64
        type:
          title: Type
          description: Type of the system.
          type: string
        vendor:
          title: Vendor
          description: Name of the vendor who makes the system.
          type: string
        version:
          title: iDRAC Firmware Version
          description: iDRAC Firmware Version of the system.
          type: string
        ytd_co2e:
          title: Year-to-date CO2
          description: CO2 emitted since the beginning of calendar year in kg.
          type: integer
          format: int64
        zip_code:
          title: Zip Code
          description: State ZIP code of where the system is located.
          type: string
      x-tags:
      - Generic System
    Srp:
      title: SRP
      description: The Vmax Storage Resource Pool.
      type: object
      required:
      - id
      properties:
        id:
          title: Id
          description: The system ID.
          type: string
        system_id:
          title: System
          description: Unique identifier for the system.
          type: string
        system:
          title: System
          description: DEPRECATED - Unique identifier for the system.
          type: string
          deprecated: true
        system_type:
          title: System Type
          description: The type of the system.
          type: string
        allocated_subscribed_percent:
          title: Used Subscribe Percent
          description: Percentage of the subscribed capacity.
          type: number
          format: double
        allocated_subscribed_size:
          title: Used Subscribe Capacity
          description: 'The used subscribe capacity - Unit: bytes'
          type: integer
          format: int64
        ckd_data_reduction_data_reducing_percent:
          title: CKD Data Reduction Data Reducing Percent
          description: SRP capacity for CKD data reduction percent.
          type: number
          format: double
        ckd_data_reduction_effective_used_data_reduction_disabled:
          title: CKD Data Reduction Effective Used Data Reduction Disabled
          description: 'SRP Capacity for CKD data reduction effective used data reduction
            disabled - Unit: bytes'
          type: integer
          format: int64
        ckd_data_reduction_effective_used_enabled_and_reducing:
          title: CKD Data Reduction Effective Used Enabled And Reducing
          description: 'SRP capacity for CKD data reduction effective used enabled
            and reducing - Unit: bytes'
          type: integer
          format: int64
        ckd_data_reduction_effective_used_enabled_and_unevaluated:
          title: CKD Data Reduction Effective Used Enabled And Unevaluated
          description: 'SRP capacity for CKD data reduction effective used enabled
            and unevaluated - Unit: bytes'
          type: integer
          format: int64
        ckd_data_reduction_effective_used_enabled_and_unreducible:
          title: CKD Data Reduction Effective Used Enabled And Unreducible
          description: 'SRP capacity for CKD A data reduction effective used enabled
            and unreducible - Unit: bytes'
          type: integer
          format: int64
        ckd_data_reduction_physical_used_data_reduction_disabled:
          title: CKD vData Reduction Physical Used Data Reduction Disabled
          description: 'SRP capacity for CKD data reduction physical used data reduction
            disabled - Unit: bytes'
          type: integer
          format: int64
        ckd_data_reduction_physical_used_enabled_and_reducing:
          title: CKD Data Reduction Physical Used Enabled And Reducing
          description: 'SRP capacity for CKD data reduction physical used enabled
            and reducing - Unit: bytes'
          type: integer
          format: int64
        ckd_data_reduction_physical_used_enabled_and_unevaluated:
          title: CKD Data Reduction Physical Used Enabled And Unevaluated
          description: 'SRP capacity for CKD data reduction physical used enabled
            and unevaluated - Unit: bytes'
          type: integer
          format: int64
        ckd_data_reduction_physical_used_enabled_and_unreducible:
          title: CKD Data Reduction Physical Used Enabled And Unreducible
          description: 'SRP capacity for CKD data reduction physical used enabled
            and unreducible - Unit: bytes'
          type: integer
          format: int64
        ckd_data_reduction_ratio_to_one:
          title: CKD Data Reduction Ratio To One
          description: SRP capacity for CKD data reduction ratio to one.
          type: number
          format: double
        ckd_data_reduction_savings:
          title: CKD Data Reduction Savings
          description: 'SRP capacity for CKD data reduction savings - Unit: bytes'
          type: integer
          format: int64
        ckd_effective_capacity_resources_free:
          title: CKD Effective Capacity Resources Free
          description: 'SRP Capacity for CKD effective capacity resources free - Unit:
            bytes'
          type: integer
          format: int64
        ckd_effective_capacity_resources_total:
          title: CKD Effective Capacity Resources Total
          description: 'SRP capacity for CKD effective capacity resources total -
            Unit: bytes'
          type: integer
          format: int64
        ckd_effective_capacity_resources_used:
          title: CKD Effective Capacity Resources Used
          description: 'SRP capacity for CKD effective capacity resources used - Unit:
            bytes'
          type: integer
          format: int64
        ckd_effective_capacity_usage_free:
          title: CKD Effective Capacity Usage Free
          description: 'SRP capacity for CKD effective capacity usage free - Unit:
            bytes'
          type: integer
          format: int64
        ckd_effective_capacity_usage_snapshot_used:
          title: CKD Effective Capacity Usage Snapshots Used
          description: 'SRP capacity for CKD effective capacity usage snapshots used
            - Unit: bytes'
          type: integer
          format: int64
        ckd_effective_capacity_usage_user_used:
          title: CKD Effective Capacity Usage User Used
          description: 'SRP capacity for CKD effective capacity usage user used -
            Unit: bytes'
          type: integer
          format: int64
        ckd_effective_free:
          title: CKD Effective Free
          description: 'SRP capacity for CKD effective free - Unit: bytes'
          type: integer
          format: int64
        ckd_effective_physical_free:
          title: CKD Effective Physical Free
          description: 'SRP capacity for CKD effective physical free - Unit: bytes'
          type: integer
          format: int64
        ckd_effective_physical_target:
          title: CKD Effective Physical Target
          description: 'SRP capacity for CKD effective physical target - Unit: bytes'
          type: integer
          format: int64
        ckd_effective_physical_total:
          title: CKD Effective Physical Total
          description: 'SRP capacity for CKD effective physical total - Unit: bytes'
          type: integer
          format: int64
        ckd_effective_physical_used:
          title: CKD Effective Physical Used
          description: 'SRP capacity for CKD-FBCKD A effective physical used - Unit:
            bytes'
          type: integer
          format: int64
        ckd_effective_target:
          title: CKD Effective Target
          description: 'SRP capacity for CKD-FCKD BA effective target - Unit: bytes'
          type: integer
          format: int64
        ckd_effective_total:
          title: CKD BA Effective Total
          description: 'SRP capacity for CKD effective total - Unit: bytes'
          type: integer
          format: int64
        ckd_effective_used:
          title: CKD Effective Used
          description: 'SRP capacity for CKD effective used - Unit: bytes'
          type: integer
          format: int64
        ckd_effective_used_percent:
          title: CKD Effective Used Percent
          description: SRP capacity for CKD effective used percent.
          type: number
          format: double
        ckd_provisioned_effective:
          title: CKD Provisioned Effective
          description: 'SRP capacity for CKD provisioned effective - Unit: bytes'
          type: integer
          format: int64
        ckd_provisioned_provisioned_percent:
          title: CKD Provisioned Provisioned Percent
          description: SRP capacity for CKD provisioned percent.
          type: number
          format: double
        ckd_provisioned_used:
          title: CKD Provisioned Used
          description: 'SRP capacity for CKD provisioned used - Unit: bytes'
          type: integer
          format: int64
        ckd_snapshot_effective_used_percent:
          title: CKD Snapshot Effective Used Percent
          description: SRP capacity for CKD snapshot effective used percent.
          type: number
          format: double
        ckd_snapshot_physical_used_percent:
          title: CKD Snapshot Physical Used Percent
          description: SRP capacity for CKD snapshot physical used percent.
          type: number
          format: double
        ckd_snapshot_resource_used:
          title: CKD Snapshot Resource Used
          description: 'SRP capacity for CKD snapshot resource used - Unit: bytes'
          type: integer
          format: int64
        collected_timestamp:
          title: Collection Timestamp
          description: Last time when the configuration data has been collected.
          type: string
          format: date-time
        collection_timestamp:
          title: Collection Timestamp
          description: DEPRECATED - Last time when the configuration data has been
            collected.
          type: string
          format: date-time
          deprecated: true
        current_ucode:
          title: UCode
          description: PowerMax OS version.
          type: string
        data_reduction_enabled_percent:
          title: Enabled Percent
          description: The Data reduction percent.
          type: number
          format: double
        data_reduction_savings:
          title: Ratio
          description: The Data reduction ratio.
          type: number
          format: double
        data_reduction_state:
          title: Compression
          description: Identifies if the Storage Resource Pool has compression.
          type: string
        deduplication_and_compression_savings:
          title: Deduplication and Compression
          description: 'SRP efficiency deduplication and compression - Unit: bytes'
          type: integer
          format: int64
        description:
          title: Description
          description: A description of the Storage Resource Pool.
          type: string
        display_name:
          title: Display Name
          description: The Array given name.
          type: string
        drr_on_reducible_only_to_one:
          title: DDR on Reducible
          description: SRP efficiency DDR on reducible.
          type: number
          format: double
        effective_capacity:
          title: Percent Effective Used
          description: The Effective Capacity used on the Storage Resource Pool.
          type: number
          format: double
        fba_data_reduction_data_reducing_percent:
          title: FBA Data Reduction Data Reducing Percent
          description: SRP capacity for FBA data reducing percent.
          type: number
          format: double
        fba_data_reduction_effective_used_data_reduction_disabled:
          title: FBA data reduction effective used data reduction disabled.
          description: 'SRP capacity for FBA data reduction effective used data reduction
            disabled - Unit: bytes'
          type: integer
          format: int64
        fba_data_reduction_effective_used_enabled_and_reducing:
          title: FBA Data Reduction Effective Used Enabled And Reducing
          description: 'SRP capacity for FBA data reduction effective used enabled
            and reducing - Unit: bytes'
          type: integer
          format: int64
        fba_data_reduction_effective_used_enabled_and_unevaluated:
          title: FBA Data Reduction Effective Used Enabled And Unevaluated
          description: 'SRP capacity for FBA data reduction effective used enabled
            and unevaluated - Unit: bytes'
          type: integer
          format: int64
        fba_data_reduction_effective_used_enabled_and_unreducible:
          title: FBA Data Reduction Effective Used Enabled And Unreducible
          description: 'SRP capacity for FBA data reduction effective used enabled
            and unreducible - Unit: bytes'
          type: integer
          format: int64
        fba_data_reduction_physical_used_data_reduction_disabled:
          title: FBA Data Reduction Physical Used Data Reduction Disabled
          description: 'SRP Capacity for FBA data reduction physical used data reduction
            disabled - Unit: bytes'
          type: integer
          format: int64
        fba_data_reduction_physical_used_enabled_and_reducing:
          title: FBA Data Reduction Physical Used Enabled And Reducing
          description: 'SRP capacity for FBA data reduction physical used enabled
            and reducing - Unit: bytes'
          type: integer
          format: int64
        fba_data_reduction_physical_used_enabled_and_unevaluated:
          title: FBA Data Reduction Physical Used Enabled And Unevaluated
          description: 'SRP capacity for FBA data reduction physical used enabled
            and unevaluated - Unit: bytes'
          type: integer
          format: int64
        fba_data_reduction_physical_used_enabled_and_unreducible:
          title: FBA Data Reduction Physical Used Enabled And Unreducible
          description: 'SRP capacity for FBA data reduction physical used enabled
            and unreducible - Unit: bytes'
          type: integer
          format: int64
        fba_data_reduction_ratio_to_one:
          title: FBA Data Reduction Ratio To One
          description: SRP capacity for FBA data reduction ratio to one.
          type: number
          format: double
        fba_data_reduction_savings:
          title: FBA Data Reduction Savings
          description: 'SRP capacity for FBA data reduction savings - Unit: bytes'
          type: integer
          format: int64
        fba_effective_capacity_resources_free:
          title: FBA Effective Capacity Resources Free
          description: 'SRP capacity for FBA effective capacity resources free - Unit:
            bytes'
          type: integer
          format: int64
        fba_effective_capacity_resources_total:
          title: FBA Effective Capacity Resources Total
          description: 'SRP capacity for FBA effective capacity resources total -
            Unit: bytes'
          type: integer
          format: int64
        fba_effective_capacity_resources_used:
          title: FBA Effective Capacity Resources Used
          description: 'SRP capacity for FBA effective capacity resources used - Unit:
            bytes'
          type: integer
          format: int64
        fba_effective_capacity_usage_free:
          title: FBA Effective Capacity Usage Free
          description: 'SRP capacity for FBA effective capacity usage free - Unit:
            bytes'
          type: integer
          format: int64
        fba_effective_capacity_usage_snapshot_used:
          title: FBA Effective Capacity Usage Snapshots Used
          description: 'SRP capacity for FBA effective capacity usage snapshots used
            - Unit: bytes'
          type: integer
          format: int64
        fba_effective_capacity_usage_user_used:
          title: FBA Effective Capacity Usage User Used
          description: 'SRP capacity for FBA effective capacity usage user used -
            Unit: bytes'
          type: integer
          format: int64
        fba_effective_free:
          title: FBA Effective Free
          description: 'SRP capacity for FBA effective free - Unit: bytes'
          type: integer
          format: int64
        fba_effective_physical_free:
          title: FBA Effective Physical Free
          description: 'SRP capacity for FBA effective physical free - Unit: bytes'
          type: integer
          format: int64
        fba_effective_physical_target:
          title: FBA Effective Physical Target
          description: 'SRP capacity for FBA effective physical target - Unit: bytes'
          type: integer
          format: int64
        fba_effective_physical_total:
          title: FBA Effective Physical Total
          description: 'SRP capacity for FBA effective physical total - Unit: bytes'
          type: integer
          format: int64
        fba_effective_physical_used:
          title: FBA Effective Physical Used
          description: 'SRP capacity for FBA effective physical used - Unit: bytes'
          type: integer
          format: int64
        fba_effective_target:
          title: FBA Effective Target
          description: 'SRP capacity for FBA effective target - Unit: bytes'
          type: integer
          format: int64
        fba_effective_total:
          title: FBA Effective Total
          description: 'SRP capacity for FBA effective total - Unit: bytes'
          type: integer
          format: int64
        fba_effective_used:
          title: FBA Effective Used
          description: 'SRP capacity for FBA effective used - Unit: bytes'
          type: integer
          format: int64
        fba_effective_used_percent:
          title: FBA Effective Used Percent
          description: SRP capacity for FBA effective used percent.
          type: number
          format: double
        fba_provisioned_effective:
          title: FBA Provisioned Effective
          description: 'SRP capacity for FBA provisioned effective - Unit: bytes'
          type: integer
          format: int64
        fba_provisioned_provisioned_percent:
          title: FBA Provisioned Provisioned Percent
          description: SRP capacity for FBA provisioned percent.
          type: number
          format: double
        fba_provisioned_used:
          title: FBA Provisioned Used
          description: 'SRP capacity for FBA provisioned used - Unit: bytes'
          type: integer
          format: int64
        fba_snapshot_effective_used_percent:
          title: FBA Snapshot Effective Used Percent
          description: SRP capacity for FBA snapshot effective used percent.
          type: number
          format: double
        fba_snapshot_physical_used_percent:
          title: FBA Snapshot Physical Used Percent
          description: SRP capacity for FBA snapshot physical used percent.
          type: number
          format: double
        fba_snapshot_resource_used:
          title: FBA Snapshot Resource Used
          description: 'SRP capacity for FBA snapshot resource used - Unit: bytes'
          type: integer
          format: int64
        free_snapshot_size:
          title: Free Snapshot Capacity
          description: 'The free Snapshot capacity - Unit: bytes'
          type: integer
          format: int64
        free_subscribed_size:
          title: Free Subscribe Capacity
          description: 'The free subscribe capacity - Unit: bytes'
          type: integer
          format: int64
        free_usable_size:
          title: Free Usable Size
          description: 'The free physical capacity - Unit: bytes'
          type: integer
          format: int64
        has_ckd_capacity:
          title: hasCkdCapacity
          description: Does this DRP have CKD Capacity Data?
          type: boolean
        has_fba_capacity:
          title: hasFbaCapacity
          description: Does this DRP have FBA Capacity Data?
          type: boolean
        model:
          title: Model
          description: The Array model.
          type: string
        object_name:
          title: Name
          description: Name of the array.
          type: string
        overall_efficiency:
          title: Overall Efficiency
          description: The overall efficiency.
          type: number
          format: double
        pattern_detection_savings:
          title: Pattern Detection
          description: 'SRP efficiency pattern detection - Unit: bytes'
          type: integer
          format: int64
        reducible_data:
          title: Reducible Data
          description: 'SRP efficiency reducible data - Unit: bytes'
          type: integer
          format: int64
        reserved_capacity_percent:
          title: Reserved Capacity
          description: Percentage of Data Reduction.
          type: number
          format: double
        serial_number:
          title: Serial Number
          description: Array Serial Number.
          type: string
        snapshot_savings:
          title: Snapshots Savings
          description: The snapshot savings
          type: number
          format: double
        system_unified_type:
          title: System Type
          description: The type of the system.
          type: string
        thin_savings:
          title: Virtual Provisioning Savings
          description: The thin savings.
          type: number
          format: double
        total_snapshot_size:
          title: Total Snapshot Capacity
          description: 'The total Snapshot capacity - Unit: bytes'
          type: integer
          format: int64
        total_subscribed_size:
          title: Total Subscribe Capacity
          description: 'The total subscribe capacity - Unit: bytes'
          type: integer
          format: int64
        total_usable_size:
          title: Total Usable Size
          description: 'The total physical capacity - Unit: bytes'
          type: integer
          format: int64
        unisphereversion:
          title: Software Management Version
          description: Software Management Version.
          type: string
        unreducible_data:
          title: Unreducible Data
          description: 'SRP efficiency unreduicible data - Unit: bytes'
          type: integer
          format: int64
        used_snapshot_percent:
          title: Used Subscribe Percent
          description: Percentage of the subscribed capacity.
          type: number
          format: double
        used_snapshot_size:
          title: Used Snapshot Capacity
          description: 'The used Snapshot capacity - Unit: bytes'
          type: integer
          format: int64
        used_usable_percent:
          title: Use Usable Percent
          description: The used percentage of physical capacity.
          type: number
          format: double
        used_usable_size:
          title: Used Usable Size
          description: 'The used physical capacity - Unit: bytes'
          type: integer
          format: int64
      x-tags:
      - Generic Storage
    StorageGroup:
      title: Storage Group
      description: The Vmax StorageGroups.
      type: object
      required:
      - id
      properties:
        id:
          title: Id
          description: The system ID.
          type: string
        system_id:
          title: System
          description: Unique identifier for the system.
          type: string
        system:
          title: System
          description: DEPRECATED - Unique identifier for the system.
          type: string
          deprecated: true
        system_type:
          title: System Type
          description: Type of the system for the storage group.
          type: string
        allocated_size:
          title: Used
          description: 'The Allocated capacity - Unit: bytes'
          type: integer
          format: int64
        collected_timestamp:
          title: Collection Timestamp
          description: Last time when the configuration data has been collected.
          type: string
          format: date-time
        collection_timestamp:
          title: Collection Timestamp
          description: DEPRECATED - Last time when the configuration data has been
            collected.
          type: string
          format: date-time
          deprecated: true
        compliance:
          title: Compliance
          description: The SG compliance.
          type: string
        compression_ratio:
          title: Compression Ratio
          description: The Compression ratio for the SG
          type: number
          format: double
        compression_saved_percent:
          title: VP Saved
          description: The compression percent.
          type: number
          format: double
        current_ucode:
          title: UCode
          description: PowerMax OS version.
          type: string
        data_reduction_ratio:
          title: Data Reduction Ratio
          description: Storage group efficiency data reduction ratio.
          type: number
          format: double
        data_reduction_state:
          title: Data Reduction State
          description: Storage group efficiency data reduction state.
          type: boolean
        display_name:
          title: Display Name
          description: The Array given name.
          type: string
        effective_used:
          title: Effective Used
          description: 'Storage group capacity effective used - Unit: bytes'
          type: integer
          format: int64
        emulation:
          title: Emulation
          description: The emulation associated with the SG.
          type: string
        free_size:
          title: Free
          description: 'The Free subscribe capacity - Unit: bytes'
          type: integer
          format: int64
        is_compression_enabled:
          title: Data Reduction
          description: If the SG has compression enable.
          type: boolean
        is_srdf_protected:
          title: SRDF
          description: If the SG is SRDF protected.
          type: boolean
        tags:
          title: Tags
          description: User defined tags.
          type: object
        masking_view_count:
          title: Masking View (#)
          description: Masking Views
          type: integer
          format: int64
        model:
          title: Model
          description: The Array model.
          type: string
        object_name:
          title: Name
          description: Name of the array.
          type: string
        parent_storage_group_id:
          title: Parent
          description: If it's a child is the parent storage group id.
          type: string
        physical_used:
          title: Physical Used
          description: 'Storage group capacity physical used - Unit: bytes'
          type: integer
          format: int64
        provisioned:
          title: Provisioned
          description: 'Storage group capacity provisioned - Unit: bytes'
          type: integer
          format: int64
        serial_number:
          title: Serial Number
          description: Array Serial Number.
          type: string
        service_level_id:
          title: Service Level
          description: The service level.
          type: string
        service_level_name:
          title: Service Level Name
          description: The service level Name.
          type: string
        snaphot_physical_used:
          title: Snapshot Physical Used
          description: 'Storage group efficiency snapshot physical used - Unit: bytes'
          type: integer
          format: int64
        snapshot_count:
          title: Snapshots
          description: The total  number of Snapshots associated with the SG.
          type: integer
          format: int64
        snapshot_drr_ratio:
          title: Snapshot Data Reduction Ratio
          description: Storage group efficiency snapshot data reduction ratio.
          type: number
          format: double
        snapshot_effective_used:
          title: Snapshot Effective Used
          description: 'Storage group efficiency snapshot effective used - Unit: bytes'
          type: integer
          format: int64
        snapshot_resources_percent:
          title: Snapshot Resources Percent
          description: Storage group efficiency snapshot resources percent.
          type: number
          format: double
        storage_resource_pool_id:
          title: SRP Id
          description: The Storage Resource Pool Id
          type: string
        storage_resource_pool_name:
          title: SRP
          description: The Storage Resource Pool name
          type: string
        subscribed_size:
          title: Subscribed
          description: 'The total Subscribe capacity - Unit: bytes'
          type: integer
          format: int64
        system_aas_model:
          title: System Model
          description: Model of the system.
          type: string
        system_tags:
          title: System Tags
          description: User defined tags.
          type: object
        system_unified_type:
          title: System Type
          description: Type of the system for the storage group.
          type: string
        total_size:
          title: Total Size
          description: 'The Total capacity - Unit: bytes'
          type: integer
          format: int64
        type:
          title: Type
          description: The type of SG (CHILD/PARENT/STANDALONE)
          type: string
        unisphereversion:
          title: Unisphere Version
          description: Version of Managment Software
          type: string
        unreducible_data:
          title: Unreducible Data
          description: 'Storage group efficiency unreducible data - Unit: bytes'
          type: integer
          format: int64
        volume_count:
          title: Volumes
          description: The total  number of Volumes associated with the SG.
          type: integer
          format: int64
      x-tags:
      - Generic Storage
    StorageSystem:
      title: Storage System
      description: The storage system.
      type: object
      required:
      - id
      properties:
        id:
          title: Id
          description: Identifier for the storage system.
          type: string
        system_id:
          title: System
          description: Unique identifier for the device or appliance.
          type: string
        system:
          title: System
          description: DEPRECATED - Unique identifier for the device or appliance.
          type: string
          deprecated: true
        system_type:
          title: System Type
          description: Type of the system.
          type: string
        bandwidth:
          title: Bandwidth
          description: 'The system bandwidth. Aggregated for a rolling average over
            the last 24 hours - Unit: bytes/s'
          type: integer
          format: int64
        capacity_impact:
          title: Capacity Impact
          description: Impact point of highest impacting issue in the capacity health
            category.
          type: integer
          format: int64
        capacity_issue_count:
          title: Capacity Issue Count
          description: Total number of issues in the capacity health category.
          type: integer
          format: int64
        city:
          title: City
          description: Name of the city where the system is located.
          type: string
        compression_savings:
          title: Compression Savings
          description: Storage efficiency ratio of data which has compression applied
            to it on the system.
          type: number
          format: double
        configuration_impact:
          title: Configuration Impact
          description: Impact point of highest impacting issue in the configuration
            health category.
          type: integer
          format: int64
        configuration_issue_count:
          title: Configuration Issue Count
          description: Total number of issues in the configuration health category.
          type: integer
          format: int64
        configured_size:
          title: Configured Size
          description: 'The configured size for this system - Unit: bytes'
          type: integer
          format: int64
        connectivity_status:
          title: Connectivity Status
          description: Connectivity status.
          type: string
        contract_coverage_type:
          title: Contract Coverage Type
          description: Type of the service contract of the system.
          type: string
        contract_expiration_timestamp:
          title: Contract Expiration Date
          description: Expiration date for the service contract of the system.
          type: string
          format: date-time
        contract_expiration_date_timestamp:
          title: Contract Expiration Date
          description: DEPRECATED - Expiration date for the service contract of the
            system.
          type: string
          format: date-time
          deprecated: true
        country:
          title: Country
          description: Name of the country where the system is located.
          type: string
        data_protection_impact:
          title: Data Protection Impact
          description: Impact point of highest impacting issue in the data protection
            health category.
          type: integer
          format: int64
        data_protection_issue_count:
          title: Data Protection Issue Count
          description: Total number of issues in the data protection health category.
          type: integer
          format: int64
        display_identifier:
          title: Display Identifier
          description: Unique identifier for the system.
          type: string
        energy_ytd:
          title: Year-to-date Energy
          description: Energy consumed since the beginning of calendar year in kW.
          type: integer
          format: int64
        free_percent:
          title: Free (%)
          description: The %free capacity.
          type: number
          format: double
        free_size:
          title: Free Size
          description: 'The free size value - Unit: bytes'
          type: integer
          format: int64
        health_connectivity_status:
          title: Health Connectivity Status
          description: Health connectivity status.
          type: string
        health_issue_count:
          title: Health Issue Count
          description: Total amount of health issues.
          type: integer
          format: int64
        health_score:
          title: Health Score
          description: The overall health score of the system.
          type: integer
          format: int64
        health_state:
          title: Health State
          description: Health state of the system.
          type: string
        iops:
          title: IOPS
          description: 'The IOPS for the system. Aggregated for a rolling average
            over the last 24 hours - Unit: IO/s'
          type: integer
          format: int64
        ipv4_address:
          title: IPv4 Address
          description: IPv4 address of the system.
          type: string
          format: ipv4
        ipv6_address:
          title: IPv6 Address
          description: IPv6 address of the system.
          type: string
          format: ipv6
        last_contact_timestamp:
          title: Last Contact Time
          description: Last time that CloudIQ received data from the system.
          type: string
          format: date-time
        latency:
          title: Latency
          description: 'The latency for the system. Aggregated for a rolling average
            over the last 24 hours - Unit: microseconds'
          type: integer
          format: int64
        location:
          title: Location
          description: Location where the system is located.
          type: string
        logical_size:
          title: Logical Size
          description: 'The logical size written - Unit: bytes'
          type: integer
          format: int64
        model:
          title: Model
          description: The model of the system.
          type: string
        object_name:
          title: Name
          description: The user-defined name of the system.
          type: string
        overall_efficiency:
          title: Overall Efficiency
          description: The overall system-level storage efficiency ratio based on
            Thin, Snapshots, Deduplication, and Data Reduction.
          type: number
          format: double
        performance_impact:
          title: Performance Impact
          description: Impact point of highest impacting issue in the performance
            health category.
          type: integer
          format: int64
        performance_issue_count:
          title: Performance Issue Count
          description: Total number of issues in the performance health category.
          type: integer
          format: int64
        power_consumption:
          title: Power Consumption
          description: Average power consumption for the day.
          type: integer
          format: int64
        serial_number:
          title: Serial Number
          description: The serial number for this system.
          type: string
        site_name:
          title: Site
          description: Name of the site where the system is located.
          type: string
        snaps_savings:
          title: Snaps Savings
          description: The snaps savings for this system.
          type: number
          format: double
        state:
          title: State
          description: Name of the state where the system is located.
          type: string
        street_address_1:
          title: Street Address 1
          description: Street address 1 of where the system is located.
          type: string
        street_address_2:
          title: Street Address 2
          description: Street address 2 of where the system is located.
          type: string
        system_health_impact:
          title: System Health Impact
          description: Health impact for the system.
          type: integer
          format: int64
        system_health_issue_count:
          title: System Health Issue Count
          description: Total amount of health issues for the system.
          type: integer
          format: int64
        system_tags:
          title: Tags
          description: User defined tags.
          type: object
        thin_savings:
          title: Thin Savings
          description: The savings due to thin provisioning.
          type: number
          format: double
        total_size:
          title: Total Size
          description: 'The total size of the system - Unit: bytes'
          type: integer
          format: int64
        type:
          title: Type
          description: Type of the system.
          type: string
        unconfigured_size:
          title: Unconfigured Size
          description: 'The unconfigured capacity for this system - Unit: bytes'
          type: integer
          format: int64
        used_percent:
          title: Used (%)
          description: Percentage of capacity used for this system.
          type: number
          format: double
        used_size:
          title: Used Size
          description: 'The value of used capacity for this system - Unit: bytes'
          type: integer
          format: int64
        vendor:
          title: Vendor
          description: Name of the vendor who makes the system.
          type: string
        version:
          title: Version
          description: Version identifier.
          type: string
        ytd_co2e:
          title: Year-to-date CO2
          description: CO2 emitted since the beginning of calendar year in kg.
          type: integer
          format: int64
        zip_code:
          title: Zip Code
          description: State ZIP code of where the system is located.
          type: string
      x-tags:
      - Generic System
    System:
      title: System
      description: The system object.
      type: object
      required:
      - id
      properties:
        id:
          title: Id
          description: Identifier of the system.
          type: string
        system_id:
          title: System
          description: Unique identifier for the device or appliance.
          type: string
        system:
          title: System
          description: DEPRECATED - Unique identifier for the device or appliance.
          type: string
          deprecated: true
        system_type:
          title: System Type
          description: Type of component.
          type: string
        capacity_impact:
          title: Capacity Impact
          description: Impact point of highest impacting issue in the capacity health
            category.
          type: integer
          format: int64
        capacity_issue_count:
          title: Capacity Issue Count
          description: Total number of issues in the capacity health category.
          type: integer
          format: int64
        city:
          title: City
          description: Name of the city where the system is located.
          type: string
        configuration_impact:
          title: Configuration Impact
          description: Impact point of highest impacting issue in the configuration
            health category.
          type: integer
          format: int64
        configuration_issue_count:
          title: Configuration Issue Count
          description: Total number of issues in the configuration health category.
          type: integer
          format: int64
        connectivity_status:
          title: Connectivity Status
          description: Connectivity status.
          type: string
        contract_coverage_type:
          title: Contract Coverage Type
          description: Type of the service contract of the system.
          type: string
        contract_expiration_timestamp:
          title: Contract Expiration Date
          description: Expiration date for the service contract of the system.
          type: string
          format: date-time
        contract_expiration_date_timestamp:
          title: Contract Expiration Date
          description: DEPRECATED - Expiration date for the service contract of the
            system.
          type: string
          format: date-time
          deprecated: true
        contract_number:
          title: Contract Number
          description: The contract number
          type: string
        country:
          title: Country
          description: Name of the country where the system is located.
          type: string
        data_protection_impact:
          title: Data Protection Impact
          description: Impact point of highest impacting issue in the data protection
            health category.
          type: integer
          format: int64
        data_protection_issue_count:
          title: Data Protection Issue Count
          description: Total number of issues in the data protection health category.
          type: integer
          format: int64
        display_identifier:
          title: Display Identifier
          description: Unique identifier for the system.
          type: string
        energy_ytd:
          title: Year-to-date Energy
          description: Energy consumed since the beginning of calendar year in kW.
          type: integer
          format: int64
        health_connectivity_status:
          title: Health Connectivity Status
          description: Health connectivity status.
          type: string
        health_issue_count:
          title: Overall Health Issue Count
          description: Total amount of health issues.
          type: integer
          format: int64
        health_score:
          title: Health Score
          description: Health score of the system.
          type: integer
          format: int64
        health_state:
          title: Health State
          description: Health state of the system.
          type: string
        ipv4_address:
          title: IPv4 Address
          description: IPv4 address of the system.
          type: string
          format: ipv4
        ipv6_address:
          title: IPv6 Address
          description: IPv6 address of the system.
          type: string
          format: ipv6
        last_contact_timestamp:
          title: Last Contact Time
          description: Last time that CloudIQ received data from the system.
          type: string
          format: date-time
        location:
          title: Location
          description: Location where the system can be found.
          type: string
        major_version:
          title: Major Version
          description: Major version of the system.
          type: integer
          format: int64
        model:
          title: Model
          description: Model of the system.
          type: string
        model_type:
          title: System Model Type
          description: Model Type of the system.
          type: string
        object_name:
          title: Name
          description: Name of the system.
          type: string
        performance_impact:
          title: Performance Impact
          description: Impact point of highest impacting issue in the performance
            health category.
          type: integer
          format: int64
        performance_issue_count:
          title: Performance Issue Count
          description: Total number of issues in the performance health category.
          type: integer
          format: int64
        power_consumption:
          title: Power Consumption
          description: Average power consumption for the day.
          type: integer
          format: int64
        serial_number:
          title: Serial Number
          description: Serial number of the component.
          type: string
        service_tag:
          title: Service Tag
          description: Service tag of the system.
          type: string
        site_name:
          title: Site
          description: Name of the site where the system is located.
          type: string
        state:
          title: State
          description: Name of the state where the system is located.
          type: string
        street_address_1:
          title: Street Address 1
          description: Street address 1 of where the system is located.
          type: string
        street_address_2:
          title: Street Address 2
          description: Street address 2 of where the system is located.
          type: string
        system_health_impact:
          title: System Health Impact
          description: Health impact for the system.
          type: integer
          format: int64
        system_health_issue_count:
          title: System Health Issue Count
          description: Total amount of health issues for the system.
          type: integer
          format: int64
        system_tags:
          title: Tags
          description: User defined tags.
          type: object
        type:
          title: Type
          description: Type of component.
          type: string
        vendor:
          title: Vendor
          description: Name of the vendor who makes the component.
          type: string
        version:
          title: Version
          description: Version number of the component.
          type: string
        ytd_co2e:
          title: Year-to-date CO2
          description: CO2 emitted since the beginning of calendar year in kg.
          type: integer
          format: int64
        zip_code:
          title: Zip Code
          description: State ZIP code of where the system is located.
          type: string
      x-tags:
      - Generic System
    VirtualMachine:
      title: Virtual Machine
      description: The virtual machine object.
      type: object
      required:
      - id
      properties:
        id:
          title: ID
          description: Identifier of the virtual machine.
          type: string
        system_id:
          title: System
          description: Unique identifier for the system managing this virtual machine.
          type: string
        system:
          title: System
          description: DEPRECATED - Unique identifier for the system managing this
            virtual machine.
          type: string
          deprecated: true
        system_type:
          title: System Type
          description: 'Type of the system for the virtual machine, the value should
            be one of: VXRAIL/VMWARE.'
          type: string
        cpu_usage_percent:
          title: CPU Utilization (%)
          description: The CPU utilization averaged past 24 hours.
          type: number
          format: double
        tags:
          title: Tags
          description: User defined tags.
          type: object
        mem_size:
          title: Memory Size
          description: 'Allocated RAM of the virtual machine - Unit: bytes'
          type: integer
          format: int64
        memory_usage_percent:
          title: Memory Utilization (%)
          description: The memory utilization averaged past 24 hours.
          type: number
          format: double
        object_name:
          title: Virtual Machine Name
          description: Name of the virtual machine.
          type: string
        num_cpu:
          title: Number of vCPU
          description: Number of vCPU's of the virtual machine.
          type: integer
          format: int64
        object_type:
          title: Object Type
          description: Type of the object, which is always VIRTUAL_MACHINE.
          type: string
        power_state:
          title: Power State
          description: 'Identifies whether the virtual machine is powered on or off,
            the value should be one of: POWERED_ON/POWERED_OFF.'
          type: string
        system_aas_model:
          title: System Model
          description: Model of the system.
          type: string
        system_tags:
          title: System Tags
          description: User defined tags.
          type: object
        system_unified_type:
          title: System Type
          description: 'Type of the system for the virtual machine, the value should
            be one of: VXRAIL/VMWARE.'
          type: string
      x-tags:
      - Generic Storage
    Volume:
      title: Volume
      description: The volume object.
      type: object
      required:
      - id
      properties:
        id:
          title: Id
          description: Identifier of the volume.
          type: string
        system_id:
          title: System
          description: Unique identifier for the device or appliance.
          type: string
        system:
          title: System
          description: DEPRECATED - Unique identifier for the device or appliance.
          type: string
          deprecated: true
        system_type:
          title: System type
          description: Type of the system for the volume.
          type: string
        allocated_size:
          title: Allocated Size
          description: 'The allocated size of the volume - Unit: bytes'
          type: integer
          format: int64
        bandwidth:
          title: Bandwidth
          description: 'The bandwidth consumed by the volume. Aggregated for a rolling
            average over the last 24 hours - Unit: bytes/s'
          type: integer
          format: int64
        consistency_group_name:
          title: Consistency Group Name
          description: Consistency group name of the volume.
          type: string
        data_reduction_percent:
          title: Data Reduction (%)
          description: The data reduction percent for the volume.
          type: number
          format: double
        data_reduction_ratio:
          title: Data Reduction Ratio
          description: The data reduction ratio for the volume.
          type: number
          format: double
        data_reduction_saved_size:
          title: Data Reduction Saved Size
          description: 'The data reduction capacity saved for the volume - Unit: bytes'
          type: integer
          format: int64
        io_limit_policy_name:
          title: IO Limit Policy Name
          description: The IO limit policy name for the volume.
          type: string
        iops:
          title: IOPS
          description: 'The IOPS for the volume. Aggregated for a rolling average
            over the last 24 hours - Unit: IO/s'
          type: integer
          format: int64
        is_compressed_or_deduped:
          title: Is Compressed Or Deduped
          description: Identifies whether the volume is compressed or deduplicated.
          type: string
        is_thin_enabled:
          title: Is Thin Enabled
          description: Identifies whether the volume has thin provisioning enabled.
          type: boolean
        issue_count:
          title: Issue Count
          description: Number of health issues that are present on the volume.
          type: integer
          format: int64
        tags:
          title: Tags
          description: User defined tags.
          type: object
        latency:
          title: Latency
          description: 'The latency for the volume. Aggregated for a rolling average
            over the last 24 hours - Unit: microseconds'
          type: integer
          format: int64
        logical_size:
          title: Logical Size
          description: 'The logical size for the volume - Unit: bytes'
          type: integer
          format: int64
        object_name:
          title: Name
          description: The name of the volume.
          type: string
        object_native_id:
          title: Native Id
          description: Identifier of the object, defined by the system.
          type: string
        object_type:
          title: Object Type
          description: Type of the object, which is either LUN or VOLUME.
          type: string
        pool_id:
          title: Pool Id
          description: The pool identifier for the volume.
          type: string
        pool_name:
          title: Pool Name
          description: The pool name for the volume.
          type: string
        pool_type:
          title: Pool Type
          description: Type of the pool.
          type: string
        snapshot_count:
          title: Snapshot Count
          description: The snapshot count for the volume.
          type: integer
          format: int64
        snapshot_policy:
          title: Snapshot Policy
          description: The snapshot policy for the volume.
          type: string
        snapshot_size:
          title: Snapshot Size
          description: 'The snapshot size for the volume - Unit: bytes'
          type: integer
          format: int64
        storage_resource_id:
          title: Storage Resource Id
          description: The storage resource identifier for the volume.
          type: string
        storage_resource_native_id:
          title: Storage Resource Native Id
          description: The storage resource native identifier for the volume.
          type: string
        system_aas_model:
          title: System Model
          description: The model of the system.
          type: string
        system_tags:
          title: System Tags
          description: User defined tags.
          type: object
        system_model:
          title: System Model
          description: The model of the system.
          type: string
        system_name:
          title: System name
          description: Name of the system for the volume.
          type: string
        system_unified_type:
          title: System type
          description: Type of the system for the volume.
          type: string
        total_size:
          title: Total Size
          description: 'The total provisioned size of the volume - Unit: bytes'
          type: integer
          format: int64
        type:
          title: Type
          description: The type of the volume, such as standalone, generic, or regular.
          type: string
        used_size:
          title: Used Size
          description: 'The used size of the volume - Unit: bytes'
          type: integer
          format: int64
        used_size_unique:
          title: Unique Used Size
          description: 'The unique used size of the volume - Unit: bytes'
          type: integer
          format: int64
      x-tags:
      - Generic Storage
  responses:
    MetricsQueryResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MetricsResponseEntries'
          examples:
            Metrics Query Response Example:
              value:
                metrics:
                - iops
                - latency
                - bandwidth
                results:
                - id: APM000__VOLUME__vol1001
                  timestamps:
                  - timestamp: '2022-06-01T11:00:00Z'
                    values:
                    - 1.0166666666666666
                    - 1.01
                    - 2.0266666666666664
                  - timestamp: '2022-06-01T11:05:00Z'
                    values:
                    - 1.0177777777777
                    - 1.01
                    - 2.027777777777
                  - timestamp: '2022-06-01T11:10:00Z'
                    values:
                    - 1.013
                    - 1.01
                    - 2.023
                - id: APM000__VOLUME__vol1002
                  timestamps:
                  - timestamp: '2022-06-01T11:00:00Z'
                    values:
                    - 1.0166666666666666
                    - 1.01
                    - 2.0266666666666664
                  - timestamp: '2022-06-01T11:05:00Z'
                    values:
                    - 1.01
                    - 1.0266666666
                    - 2.0366666666
                  - timestamp: '2022-06-01T11:10:00Z'
                    values:
                    - 1.01
                    - 1.027777
                    - 2.037777
    PartialMetricsQueryResponse:
      description: Partial Content
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PartialMetricsResponseEntries'
    MetricMetadataCollection:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MetricMetadataInstances'
          example:
            results:
            - name: read_iops
              description:... category: PERF
              type: RATE
              units: IO
              resource_type: volume
              interval: PT5M
            - name: write_iops
              description:... category: PERF
              type: RATE
              units: IO
              resource_type: volume
              interval: PT5M
            - name: total_iops
              description:... category: PERF
              type: RATE
              units: IO
              resource_type: volume
              interval: PT5M
            - name: allocated_size
              description:... category: SPACE
              type: FACT
              units: BYTE
              resource_type: volume
              interval: PT5M
    PagedMetricMetadataCollection:
      description: Partial Content
      x-tags:
      - Metrics
      content:
        application/json:
          schema:
            type: object
            properties:
              paging:
                $ref: '#/components/schemas/Paging'
              results:
                type: array
                items:
                  $ref: '#/components/schemas/MetricMetadataInstance'

